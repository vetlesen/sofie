'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var react = require('react');
var isFastEqual = require('react-fast-compare');
var withSelector = require('use-sync-external-store/with-selector');
var context = require('./context.cjs');
var utils = require('./utils.cjs');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var isFastEqual__default = /*#__PURE__*/_interopDefaultCompat(isFastEqual);
function useLiveQuery(initialData, query, queryParams, options) {
  const {
    isEqual = isFastEqual__default.default
  } = options || {};
  const defineStore = react.useContext(context.defineListenerContext);
  const params = utils.useParams(queryParams);
  const store = react.useMemo(() => defineStore(initialData, query, params), [defineStore, initialData, params, query]);
  const [serverSnapshot] = react.useState(() => {
    if (initialData === void 0) {
      throw new Error("initialSnapshot can't be undefined, if you don't want an initial value use null instead");
    }
    try {
      return JSON.parse(JSON.stringify(initialData));
    } catch (error) {
      console.warn("Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable", {
        initialSnapshot: initialData,
        error
      });
      return initialData;
    }
  });
  const getServerSnapshot = react.useCallback(() => serverSnapshot, [serverSnapshot]);
  const selector = react.useCallback(snapshot2 => snapshot2, []);
  const snapshot = withSelector.useSyncExternalStoreWithSelector(store.subscribe, store.getSnapshot, getServerSnapshot, selector, isEqual);
  const loading = useLiveQueryIsLoading(query, params);
  return [snapshot, loading];
}
function useLiveQueryIsLoading(query, params) {
  const loadedListeners = react.useContext(context.LoadedListenersContext);
  const key = react.useMemo(() => utils.getQueryCacheKey(query, params), [params, query]);
  return react.useMemo(() => {
    if (Array.isArray(loadedListeners)) {
      return loadedListeners.includes(key) ? false : true;
    }
    return false;
  }, [key, loadedListeners]);
}
function useIsEnabled() {
  return react.useContext(context.IsEnabledContext);
}
exports.useIsEnabled = useIsEnabled;
exports.useLiveQuery = useLiveQuery;
//# sourceMappingURL=hooks.cjs.map
