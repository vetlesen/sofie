{"version":3,"file":"LiveQueryClientComponent.js","sources":["../../src/LiveQuery/LiveQueryClientComponent.tsx"],"sourcesContent":["'use client'\n\nimport type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport type { PropsWithChildren } from 'react'\nimport { Children, cloneElement, isValidElement } from 'react'\n\nimport { useLiveQuery } from './useLiveQuery'\n\nexport type { ClientQueryParams }\n\nexport type LiveQueryClientComponentProps<QueryResult, QueryParams> =\n  PropsWithChildren<{\n    initialData: QueryResult\n    query: string\n    params?: QueryParams | undefined\n  }>\n\n// Browser-only preview component, overwrites the data prop with live data on-demand\nexport default function LiveQueryClientComponent<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(\n  props: LiveQueryClientComponentProps<QueryResult, QueryParams>,\n): React.JSX.Element {\n  const { initialData, query, params, children } = props\n  const data = useLiveQuery<QueryResult, QueryParams>(\n    initialData,\n    query,\n    params,\n  )\n\n  return <Slot data={data}>{children}</Slot>\n}\nLiveQueryClientComponent.displayName = 'LiveQuery'\n\n/**\n * Original source for `Slot` is `@radix-ui/react-slot`: https://github.com/radix-ui/primitives/blob/3e0642e40038386d58da9fb1d812c2fbfe9f67c1/packages/react/slot/src/Slot.tsx\n * It's copied and modified here as the original doesn't override the props on children, which would require us to use this pattern:\n * ```<LiveQuery initialData={data}><Posts /></LiveQuery>```\n * However, we want to use this pattern as it preserves the same type safety as before live queries are added:\n * ```<LiveQuery initialData={data}><Posts data={data} /></LiveQuery>```\n *\n * It also made sense to modify the original as our use case is smaller than radix, for example we don't have to worry about merging `style` props\n */\n\ninterface SlotProps {\n  children: React.ReactNode\n  // eslint-disable-next-line no-warning-comments\n  // @TODO support better typings\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any\n}\n\nconst Slot = (props: SlotProps) => {\n  const { children, data, ...slotProps } = props\n\n  if (isValidElement(children)) {\n    return cloneElement(children, {\n      ...slotProps,\n      ...children.props,\n      // all child props should override, except for `data`\n      data,\n      // eslint-disable-next-line no-warning-comments\n      // @ts-expect-error -- @todo fix the typings\n      ref: children.ref,\n    })\n  }\n\n  return Children.count(children) > 1 ? Children.only(null) : null\n}\nSlot.displayName = 'Slot'\n"],"names":["children","LiveQueryClientComponent","Slot"],"mappings":";;;;AAkBA;;;;;AAMsCA;;;AAO7B;;AAAmBA;AAAS;AACrC;AACAC;AAoBA;;;;;;AAGM;;AAEA;;AACY;;AAEZ;AAAA;;AAGc;AAElB;AAEO;AACT;AACAC;"}