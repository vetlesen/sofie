import { useContext, useMemo, useState, useCallback, useSyncExternalStore } from 'react';
import { defineListenerContext } from '../context.js';
import { useParams } from '../utils.js';
function useLiveQuery(initialData, query, queryParams2) {
  const defineStore = useContext(defineListenerContext);
  const queryParams = useParams(queryParams2);
  const store = useMemo(() => defineStore(initialData, query, queryParams), [defineStore, initialData, queryParams, query]);
  const [serverSnapshot] = useState(() => {
    if (initialData === void 0) {
      throw new Error("initialSnapshot can't be undefined, if you don't want an initial value use null instead");
    }
    try {
      return JSON.parse(JSON.stringify(initialData));
    } catch (error) {
      console.warn("Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable", {
        initialSnapshot: initialData,
        error
      });
      return initialData;
    }
  });
  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot]);
  return useSyncExternalStore(store.subscribe, store.getSnapshot, getServerSnapshot);
}
export { useLiveQuery };
//# sourceMappingURL=useLiveQuery.js.map
