import { jsx } from 'react/jsx-runtime';
import { Children, isValidElement } from 'react';
const DEFAULT_PARAMS = {};
function createConditionalLiveQuery(options) {
  const {
    ClientComponent
  } = options;
  function ConditionalLiveQuery(props) {
    if (!props.enabled) {
      return props.children;
    }
    const {
      query,
      params = DEFAULT_PARAMS,
      initialData,
      as: LiveComponent
    } = props;
    if (LiveComponent) {
      if (Children.count(props.children) > 1) {
        throw new Error("LiveQuery: `as` prop can only be used with a single child");
      }
      if (!isValidElement(props.children)) {
        throw new Error("LiveQuery: `as` prop requires a valid `children` prop");
      }
      return /* @__PURE__ */jsx(ClientComponent, {
        initialData,
        query,
        params,
        children: /* @__PURE__ */jsx(LiveComponent, {
          ...props.children.props
        })
      });
    }
    return /* @__PURE__ */jsx(ClientComponent, {
      initialData,
      query,
      params,
      children: props.children
    });
  }
  ConditionalLiveQuery.displayName = "ConditionalLiveQuery";
  return ConditionalLiveQuery;
}
export { createConditionalLiveQuery };
//# sourceMappingURL=createConditionalLiveQuery.js.map
