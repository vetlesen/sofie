{"version":3,"file":"useLiveQuery.js","sources":["../../src/LiveQuery/useLiveQuery.ts"],"sourcesContent":["// This is a smaller version of `useLiveQuery`, as `LiveQuery` doesn't\n// need the more advanced features `useLiveQuery`, like the `isEqual` option or the `loading` state\n\nimport type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n  useSyncExternalStore,\n} from 'react'\n\nimport { defineListenerContext } from '../context'\nimport { useParams } from '../utils'\n\n// Re-export types we use that are needed externally\nexport type { ClientQueryParams }\n\n/** @public */\nexport function useLiveQuery<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(\n  initialData: QueryResult,\n  query: string,\n  queryParams2?: QueryParams,\n): QueryResult {\n  const defineStore = useContext(defineListenerContext)\n  const queryParams = useParams(queryParams2)\n  const store = useMemo(\n    () => defineStore<QueryResult>(initialData, query, queryParams),\n    [defineStore, initialData, queryParams, query],\n  )\n  // initialSnapshot might change before hydration is done, so deep cloning it on the first hook call\n  // helps ensure that we don't get a mismatch between the server and client snapshots\n  const [serverSnapshot] = useState(() => {\n    if (initialData === undefined) {\n      throw new Error(\n        `initialSnapshot can't be undefined, if you don't want an initial value use null instead`,\n      )\n    }\n    try {\n      return JSON.parse(JSON.stringify(initialData))\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable\",\n        { initialSnapshot: initialData, error },\n      )\n      return initialData\n    }\n  })\n  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot])\n\n  return useSyncExternalStore(\n    store.subscribe,\n    store.getSnapshot,\n    getServerSnapshot,\n  )\n}\n"],"names":["useLiveQuery","initialData","query","queryParams2","defineStore","useContext","defineListenerContext","queryParams","useParams","store","useMemo","serverSnapshot","useState","Error","JSON","parse","stringify","error","console","warn","initialSnapshot","getServerSnapshot","useCallback","useSyncExternalStore","subscribe","getSnapshot"],"mappings":";;;AAmBgB,SAAAA,YAAAA,CAIdC,WACA,EAAAC,KAAA,EACAC,YACa,EAAA;EACP,MAAAC,WAAA,GAAcC,WAAWC,qBAAqB,CAAA;EAC9C,MAAAC,WAAA,GAAcC,UAAUL,YAAY,CAAA;EAC1C,MAAMM,KAAQ,GAAAC,OAAA,CACZ,MAAMN,WAAA,CAAyBH,WAAa,EAAAC,KAAA,EAAOK,WAAW,CAAA,EAC9D,CAACH,WAAA,EAAaH,WAAa,EAAAM,WAAA,EAAaL,KAAK,CAAA,CAC/C;EAGA,MAAM,CAACS,cAAc,CAAI,GAAAC,QAAA,CAAS,MAAM;IACtC,IAAIX,gBAAgB,KAAW,CAAA,EAAA;MAC7B,MAAM,IAAIY,KAAA,CACR,yFAAA,CACF;IACF;IACI,IAAA;MACF,OAAOC,IAAK,CAAAC,KAAA,CAAMD,IAAK,CAAAE,SAAA,CAAUf,WAAW,CAAC,CAAA;aACtCgB,KAAO,EAAA;MAENC,OAAA,CAAAC,IAAA,CACN,2HAAA,EACA;QAAEC,eAAiB,EAAAnB,WAAA;QAAagB;MAAM,CAAA,CACxC;MACO,OAAAhB,WAAA;IACT;EAAA,CACD,CAAA;EACD,MAAMoB,oBAAoBC,WAAY,CAAA,MAAMX,cAAgB,EAAA,CAACA,cAAc,CAAC,CAAA;EAErE,OAAAY,oBAAA,CACLd,KAAM,CAAAe,SAAA,EACNf,KAAM,CAAAgB,WAAA,EACNJ,iBAAA,CACF;AACF;"}