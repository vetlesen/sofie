{"version":3,"file":"transcode.cjs","sources":["../../src/csm/transcode.ts"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport type {\n  ContentSourceMap,\n  ContentSourceMapDocuments,\n} from '@sanity/client'\nimport { vercelStegaCombine } from '@vercel/stega'\n\nimport { defineEditLink } from './editIntent'\nimport { encode } from './sourcemap'\nimport type {\n  CreateTranscoderConfig,\n  FilterDefault,\n  PathSegment,\n  Transcoder,\n} from './types'\n\nconst filterDefault: FilterDefault = ({ path }) => {\n  const endPath = path.at(-1)\n  // Never encode slugs\n  if (path.at(-2) === 'slug' && endPath === 'current') {\n    return false\n  }\n\n  // Skip underscored keys, needs better heuristics but it works for now\n  if (typeof endPath === 'string' && endPath.startsWith('_')) {\n    return false\n  }\n\n  /**\n   * Best effort infer Portable Text paths that should not be encoded.\n   * Nothing is for certain, and the below implementation may cause paths that aren't Portable Text and otherwise be safe to encode to be skipped.\n   * However, that's ok as userland can always opt-in with the `encodeSourceMapAtPath` option and mark known safe paths as such, which will override this heuristic.\n   */\n  // If the path ends in [number].children[number].marks[number] it's likely a PortableTextSpan: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#LL154C16-L154C16\n  if (\n    typeof endPath === 'number' &&\n    path.at(-2) === 'marks' &&\n    typeof path.at(-3) === 'number' &&\n    path.at(-4) === 'children' &&\n    typeof path.at(-5) === 'number'\n  ) {\n    return false\n  }\n  // Or if it's [number].markDefs[number].href it's likely a PortableTextLink: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L163\n  if (\n    endPath === 'href' &&\n    typeof path.at(-2) === 'number' &&\n    path.at(-3) === 'markDefs' &&\n    typeof path.at(-4) === 'number'\n  ) {\n    return false\n  }\n  // Otherwise we have to deal with special properties of PortableTextBlock, and we can't confidently know if it's actually a `_type: 'block'` array item or not.\n  // All we know is that if it is indeed a block, and we encode the strings on these keys it'll for sure break the PortableText rendering and thus we skip encoding.\n  if (typeof endPath === 'string' && typeof path.at(-2) === 'number') {\n    // https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L48-L58\n    if (endPath === 'style' || endPath === 'listItem') {\n      return false\n    }\n  }\n\n  return true\n}\n\nconst TRUNCATE_LENGTH = 20\n\n/** @alpha */\nexport function createTranscoder(config: CreateTranscoderConfig): Transcoder {\n  const { studioUrl, encodeSourceMapAtPath, logger } = config\n\n  const createEditLink = defineEditLink(studioUrl)\n  const report: Record<\n    'encoded' | 'skipped',\n    { path: string; length: number; value: string }[]\n  > = { encoded: [], skipped: [] }\n\n  const transcode = (\n    input: string,\n    sourceDocument: ContentSourceMapDocuments[number],\n    sourcePath: PathSegment[],\n  ): string => {\n    // Allow userland to control when to opt-out of encoding\n    if (\n      (typeof encodeSourceMapAtPath === 'function'\n        ? encodeSourceMapAtPath({ path: sourcePath, filterDefault })\n        : filterDefault({ path: sourcePath, filterDefault })) === false\n    ) {\n      if (logger) {\n        report.skipped.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${input.slice(0, TRUNCATE_LENGTH)}${\n            input.length > TRUNCATE_LENGTH ? '...' : ''\n          }`,\n          length: input.length,\n        })\n      }\n      return input\n    }\n\n    if (logger) {\n      report.encoded.push({\n        path: prettyPathForLogging(sourcePath),\n        value: `${input.slice(0, TRUNCATE_LENGTH)}${\n          input.length > TRUNCATE_LENGTH ? '...' : ''\n        }`,\n        length: input.length,\n      })\n    }\n\n    return vercelStegaCombine(\n      input,\n      {\n        origin: 'sanity.io',\n        href: createEditLink(sourceDocument, sourcePath),\n      },\n      'auto',\n    )\n  }\n\n  return <R>(result: R, csm: ContentSourceMap) => {\n    // Clear previous reports\n    report.encoded.length = 0\n    report.skipped.length = 0\n\n    return {\n      result: encode(result, csm, (value, sourceDocument, path) =>\n        transcode(value, sourceDocument, path),\n      ),\n      report,\n    }\n  }\n}\n\nfunction prettyPathForLogging(path: PathSegment[]): string {\n  return path\n    .map((segment, index) =>\n      typeof segment === 'number'\n        ? `[${segment}]`\n        : index > 0\n        ? `.${segment}`\n        : segment,\n    )\n    .join('')\n}\n"],"names":["filterDefault","_ref","path","endPath","at","startsWith","TRUNCATE_LENGTH","createTranscoder","config","studioUrl","encodeSourceMapAtPath","logger","createEditLink","defineEditLink","report","encoded","skipped","transcode","input","sourceDocument","sourcePath","push","prettyPathForLogging","value","concat","slice","length","vercelStegaCombine","origin","href","result","csm","encode","map","segment","index","join"],"mappings":"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"}