{"version":3,"file":"jsonpath.js","sources":["../../src/csm/jsonpath.ts"],"sourcesContent":["import type { PathSegment } from './types'\n\nconst ESCAPE: Record<string, string> = {\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\n\nconst UNESCAPE: Record<string, string> = {\n  '\\\\f': '\\f',\n  '\\\\n': '\\n',\n  '\\\\r': '\\r',\n  '\\\\t': '\\t',\n  \"\\\\'\": \"'\",\n  '\\\\\\\\': '\\\\',\n}\n\n/** @internal */\nexport function normalisedJsonPath(path: PathSegment[]): string {\n  return `$${path\n    .map((key) => {\n      if (typeof key === 'string') {\n        const escapedKey = key.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `['${escapedKey}']`\n      }\n\n      return `[${key}]`\n    })\n    .join('')}`\n}\n\n/** @internal */\nexport function parseNormalisedJsonPath(path: string): PathSegment[] {\n  const parsed: PathSegment[] = []\n\n  const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]/g\n  let match: RegExpExecArray | null\n\n  while ((match = parseRe.exec(path)) !== null) {\n    if (match[1] !== undefined) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push(key)\n      continue\n    }\n\n    if (match[2] !== undefined) {\n      parsed.push(parseInt(match[2], 10))\n      continue\n    }\n  }\n\n  return parsed\n}\n"],"names":["ESCAPE","UNESCAPE","normalisedJsonPath","path","concat","map","key","escapedKey","replace","match","join","parseNormalisedJsonPath","parsed","parseRe","exec","m","push","parseInt"],"mappings":"AAEA,MAAMA,MAAiC,GAAA;EACrC,IAAM,EAAA,KAAA;EACN,IAAM,EAAA,KAAA;EACN,IAAM,EAAA,KAAA;EACN,GAAM,EAAA,KAAA;EACN,GAAK,EAAA,KAAA;EACL,IAAM,EAAA;AACR,CAAA;AAEA,MAAMC,QAAmC,GAAA;EACvC,KAAO,EAAA,IAAA;EACP,KAAO,EAAA,IAAA;EACP,KAAO,EAAA,IAAA;EACP,KAAO,EAAA,GAAA;EACP,KAAO,EAAA,GAAA;EACP,MAAQ,EAAA;AACV,CAAA;AAGO,SAASC,mBAAmBC,IAA6B,EAAA;EAC9D,OAAO,GAAI,CAAAC,MAAA,CAAAD,IAAA,CACRE,GAAI,CAACC,GAAQ,IAAA;IACR,IAAA,OAAOA,QAAQ,QAAU,EAAA;MAC3B,MAAMC,UAAa,GAAAD,GAAA,CAAIE,OAAQ,CAAA,gBAAA,EAAmBC,KAAU,IAAA;QAC1D,OAAOT,OAAOS,KAAK,CAAA;MAAA,CACpB,CAAA;MACD,OAAO,KAAKL,MAAU,CAAAG,UAAA,EAAA,IAAA,CAAA;IACxB;IAEA,OAAO,IAAIH,MAAG,CAAAE,GAAA,EAAA,GAAA,CAAA;EAAA,CACf,CACA,CAAAI,IAAA,CAAK,EAAE,CAAA,CAAA;AACZ;AAGO,SAASC,wBAAwBR,IAA6B,EAAA;EACnE,MAAMS,SAAwB,EAAC;EAE/B,MAAMC,OAAU,GAAA,wBAAA;EACZ,IAAAJ,KAAA;EAEJ,OAAA,CAAQA,KAAQ,GAAAI,OAAA,CAAQC,IAAK,CAAAX,IAAI,OAAO,IAAM,EAAA;IACxC,IAAAM,KAAA,CAAM,CAAC,CAAA,KAAM,KAAW,CAAA,EAAA;MAC1B,MAAMH,MAAMG,KAAM,CAAA,CAAC,EAAED,OAAQ,CAAA,mBAAA,EAAsBO,CAAM,IAAA;QACvD,OAAOd,SAASc,CAAC,CAAA;MAAA,CAClB,CAAA;MAEDH,MAAA,CAAOI,KAAKV,GAAG,CAAA;MACf;IACF;IAEI,IAAAG,KAAA,CAAM,CAAC,CAAA,KAAM,KAAW,CAAA,EAAA;MAC1BG,MAAA,CAAOI,KAAKC,QAAS,CAAAR,KAAA,CAAM,CAAC,CAAA,EAAG,EAAE,CAAC,CAAA;MAClC;IACF;EACF;EAEO,OAAAG,MAAA;AACT;"}