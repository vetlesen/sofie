{"version":3,"file":"hooks.cjs","sources":["../src/hooks.ts"],"sourcesContent":["import type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport { useCallback, useContext, useMemo, useState } from 'react'\nimport isFastEqual from 'react-fast-compare'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector'\n\nimport {\n  defineListenerContext,\n  IsEnabledContext,\n  LoadedListenersContext,\n} from './context'\nimport { getQueryCacheKey, useParams } from './utils'\n\n// Re-export types we use that are needed externally\nexport type { ClientQueryParams }\n\n/**\n * By default 'react-fast-compare' is used to check if the query result has changed.\n * It's reasonably fast, but you can make it even faster by providing your own function as you know which\n * part of the query result is visible to the user, and which parts can skip rendering.\n * @public\n */\nexport type isEqualFn<QueryResult> = (a: QueryResult, b: QueryResult) => boolean\n\n/** @public */\nexport interface LiveQueryHookOptions<QueryResult> {\n  isEqual?: isEqualFn<QueryResult>\n}\n\n/** @public */\nexport type QueryLoading = boolean\n\n/** @public */\nexport function useLiveQuery<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(\n  initialData: QueryResult,\n  query: string,\n  queryParams?: QueryParams,\n  options?: LiveQueryHookOptions<QueryResult>,\n): [QueryResult, QueryLoading] {\n  const { isEqual = isFastEqual } = options || {}\n\n  const defineStore = useContext(defineListenerContext)\n  const params = useParams(queryParams)\n  const store = useMemo(\n    () => defineStore<QueryResult>(initialData, query, params),\n    [defineStore, initialData, params, query],\n  )\n  // initialSnapshot might change before hydration is done, so deep cloning it on the first hook call\n  // helps ensure that we don't get a mismatch between the server and client snapshots\n  const [serverSnapshot] = useState(() => {\n    if (initialData === undefined) {\n      throw new Error(\n        `initialSnapshot can't be undefined, if you don't want an initial value use null instead`,\n      )\n    }\n    try {\n      return JSON.parse(JSON.stringify(initialData))\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable\",\n        { initialSnapshot: initialData, error },\n      )\n      return initialData\n    }\n  })\n  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot])\n  const selector = useCallback((snapshot: QueryResult) => snapshot, [])\n\n  const snapshot = useSyncExternalStoreWithSelector(\n    store.subscribe,\n    store.getSnapshot,\n    getServerSnapshot,\n    selector,\n    isEqual,\n  )\n  const loading = useLiveQueryIsLoading(query, params)\n\n  return [snapshot, loading]\n}\n\n/**\n * Wether a particular query is loading or not.\n * @public\n */\nfunction useLiveQueryIsLoading(\n  query: string,\n  params: ClientQueryParams,\n): QueryLoading {\n  const loadedListeners = useContext(LoadedListenersContext)\n  const key = useMemo(() => getQueryCacheKey(query, params), [params, query])\n\n  return useMemo(() => {\n    if (Array.isArray(loadedListeners)) {\n      return loadedListeners.includes(key) ? false : true\n    }\n    return false\n  }, [key, loadedListeners])\n}\n\n/**\n * The `useLiveQuery` hook is designed to work in environments where the parent `LiveQueryProvider` may be lazy loaded.\n * Thus if it can't \"know\" if it's \"live\" or not, or of it will be later. When everything is setup correctly this is fine.\n * This hook on the other hand does know. If it returns `false` then sibling `useLiveQuery` hooks are not \"live\".\n * If it returns `true` then sibling `useLiveQuery` hooks are \"live\" as there is a parent `LiveQueryProvider` in the tree that is loaded and active.\n * @public\n */\nexport function useIsEnabled(): boolean {\n  return useContext(IsEnabledContext)\n}\n"],"names":["useLiveQuery","initialData","query","queryParams","options","isEqual","isFastEqual","defineStore","useContext","defineListenerContext","params","useParams","store","useMemo","serverSnapshot","useState","Error","JSON","parse","stringify","error","console","warn","initialSnapshot","getServerSnapshot","useCallback","selector","snapshot","useSyncExternalStoreWithSelector","subscribe","getSnapshot","loading","useLiveQueryIsLoading","loadedListeners","LoadedListenersContext","key","getQueryCacheKey","Array","isArray","includes","useIsEnabled","IsEnabledContext"],"mappings":";;;;;;;;;;;;;;;;AAgCO,SAASA,YAIdA,CAAAC,WAAA,EACAC,KACA,EAAAC,WAAA,EACAC,OAC6B,EAAA;EAC7B,MAAM;IAAEC,OAAA,GAAUC,oBAAAA,CAAAA;GAAY,GAAIF,WAAW,CAAA,CAAC;EAExC,MAAAG,WAAA,GAAcC,iBAAWC,OAAAA,CAAAA,qBAAqB,CAAA;EAC9C,MAAAC,MAAA,GAASC,gBAAUR,WAAW,CAAA;EACpC,MAAMS,KAAQ,GAAAC,KAAA,CAAAA,OAAA,CACZ,MAAMN,WAAA,CAAyBN,WAAa,EAAAC,KAAA,EAAOQ,MAAM,CAAA,EACzD,CAACH,WAAA,EAAaN,WAAa,EAAAS,MAAA,EAAQR,KAAK,CAAA,CAC1C;EAGA,MAAM,CAACY,cAAc,CAAI,GAAAC,KAAAA,CAAAA,QAAA,CAAS,MAAM;IACtC,IAAId,gBAAgB,KAAW,CAAA,EAAA;MAC7B,MAAM,IAAIe,KAAA,CACR,yFAAA,CACF;IACF;IACI,IAAA;MACF,OAAOC,IAAK,CAAAC,KAAA,CAAMD,IAAK,CAAAE,SAAA,CAAUlB,WAAW,CAAC,CAAA;aACtCmB,KAAO,EAAA;MAENC,OAAA,CAAAC,IAAA,CACN,2HAAA,EACA;QAAEC,eAAiB,EAAAtB,WAAA;QAAamB;MAAM,CAAA,CACxC;MACO,OAAAnB,WAAA;IACT;EAAA,CACD,CAAA;EACD,MAAMuB,oBAAoBC,KAAAA,CAAAA,WAAY,CAAA,MAAMX,cAAgB,EAAA,CAACA,cAAc,CAAC,CAAA;EAC5E,MAAMY,WAAWD,KAAAA,CAAAA,WAAY,CAACE,SAA0BA,IAAAA,SAAAA,EAAU,EAAE,CAAA;EAEpE,MAAMA,QAAW,GAAAC,YAAA,CAAAA,gCAAA,CACfhB,KAAM,CAAAiB,SAAA,EACNjB,KAAM,CAAAkB,WAAA,EACNN,iBAAA,EACAE,QAAA,EACArB,OAAA,CACF;EACM,MAAA0B,OAAA,GAAUC,qBAAsB,CAAA9B,KAAA,EAAOQ,MAAM,CAAA;EAE5C,OAAA,CAACiB,UAAUI,OAAO,CAAA;AAC3B;AAMA,SAASC,qBAAAA,CACP9B,OACAQ,MACc,EAAA;EACR,MAAAuB,eAAA,GAAkBzB,iBAAW0B,OAAAA,CAAAA,sBAAsB,CAAA;EACnD,MAAAC,GAAA,GAAMtB,aAAQ,CAAA,MAAMuB,sBAAiB,CAAAlC,KAAA,EAAOQ,MAAM,CAAG,EAAA,CAACA,MAAQ,EAAAR,KAAK,CAAC,CAAA;EAE1E,OAAOW,cAAQ,MAAM;IACf,IAAAwB,KAAA,CAAMC,OAAQ,CAAAL,eAAe,CAAG,EAAA;MAClC,OAAOA,eAAgB,CAAAM,QAAA,CAASJ,GAAG,CAAA,GAAI,KAAQ,GAAA,IAAA;IACjD;IACO,OAAA,KAAA;EAAA,CACN,EAAA,CAACA,GAAK,EAAAF,eAAe,CAAC,CAAA;AAC3B;AASO,SAASO,YAAwBA,CAAA,EAAA;EACtC,OAAOhC,KAAAA,CAAAA,WAAWiC,OAAAA,CAAAA,gBAAgB,CAAA;AACpC;;"}