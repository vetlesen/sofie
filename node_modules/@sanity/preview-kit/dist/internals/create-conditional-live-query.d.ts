/// <reference types="react" />

import type { QueryParams as ClientQueryParams } from '@sanity/client'
import type { PropsWithChildren } from 'react'

export { ClientQueryParams }

/**
 * @internal
 */
export declare function createConditionalLiveQuery<
  QueryResult,
  QueryParams extends ClientQueryParams = ClientQueryParams,
>(options: {
  ClientComponent: React.ComponentType<
    LiveQueryClientComponentProps<QueryResult, QueryParams>
  >
}): React.ComponentType<LiveQueryProps<QueryResult, QueryParams>>

export declare type LiveQueryClientComponentProps<QueryResult, QueryParams> =
  PropsWithChildren<{
    initialData: QueryResult
    query: string
    params?: QueryParams | undefined
  }>

export declare interface LiveQueryProps<
  QueryResult,
  QueryParams extends ClientQueryParams = ClientQueryParams,
> extends LiveQueryClientComponentProps<QueryResult, QueryParams> {
  enabled: boolean
  as?: React.ComponentType<any>
}

export {}
