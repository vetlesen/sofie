/// <reference types="react" />

import type { QueryParams as ClientQueryParams } from '@sanity/client'
import { ComponentType } from 'react'
import type { SanityClient } from '@sanity/client'

/** @public */
export declare interface CacheOptions {
  /**
   * Uses a `Listen` API call with EventSource to stream updates in real-time to the documents cache
   * @defaultValue true
   */
  listen?: boolean
  /**
   * The maximum number of documents to keep in the in-memory
   * @defaultValue 3000
   */
  maxDocuments?: number
  /**
   * Set it to an array over document `_type` names to filter the cache to, set it to an empty array to cache any type
   * @defaultValue []
   */
  includeTypes?: string[]
}

export { ClientQueryParams }

/**
 * @internal
 */
export declare function createLiveQueryProvider(options: {
  GroqStoreProvider: React.ComponentType<LiveQueryProviderProps>
  LiveStoreProvider: React.ComponentType<LiveQueryProviderProps>
}): React.ComponentType<LiveQueryProviderProps>

/**
 * By default 'react-fast-compare' is used to check if the query result has changed.
 * It's reasonably fast, but you can make it even faster by providing your own function as you know which
 * part of the query result is visible to the user, and which parts can skip rendering.
 * @public
 */
export declare type isEqualFn<QueryResult> = (
  a: QueryResult,
  b: QueryResult,
) => boolean

/** @public */
export declare interface LiveQueryHookOptions<QueryResult> {
  isEqual?: isEqualFn<QueryResult>
}

declare const LiveQueryProvider: ComponentType<LiveQueryProviderProps>
export { LiveQueryProvider }
export default LiveQueryProvider

/** @public */
export declare interface LiveQueryProviderProps {
  children: React.ReactNode
  client: SanityClient
  /**
   * Reconfigures `client` with the provided `token`, as well as changing its configuration to
   * have `perspective: 'previewDrafts'`, `useCdn: false` and `ignoreBrowserTokenWarning: true`.
   * If you want to use a different configuration, then use just the `client` prop and set the token yourself,
   * for example by: `client={client.withConfig({token})}`
   */
  token?: string
  cache?: CacheOptions
  /**
   * Uses a `Listen` API call with EventSource to stream updates in real-time to the documents cache, powered by `Content Source Map` metadata
   * @defaultValue true
   */
  turboSourceMap?: boolean
  /**
   * The interval in millieseconds to refetch in the background, when the tab is active.
   * It's only used if `turboSourceMap` is set to `true` or there are too many documents to fit in the local cache.
   * Set it to `0` to disable background refresh.
   * @defaultValue 10000
   */
  refreshInterval?: number
  logger?: Logger
}

/**
 * Specify a `console.log` compatible logger to aid debugging
 * @public
 */
export declare type Logger =
  | typeof console
  | Pick<typeof console, 'warn' | 'error' | 'log'>

/** @public */
export declare type QueryLoading = boolean

/**
 * The `useLiveQuery` hook is designed to work in environments where the parent `LiveQueryProvider` may be lazy loaded.
 * Thus if it can't "know" if it's "live" or not, or of it will be later. When everything is setup correctly this is fine.
 * This hook on the other hand does know. If it returns `false` then sibling `useLiveQuery` hooks are not "live".
 * If it returns `true` then sibling `useLiveQuery` hooks are "live" as there is a parent `LiveQueryProvider` in the tree that is loaded and active.
 * @public
 */
export declare function useIsEnabled(): boolean

/** @public */
export declare function useLiveQuery<
  QueryResult,
  QueryParams extends ClientQueryParams = ClientQueryParams,
>(
  initialData: QueryResult,
  query: string,
  queryParams?: QueryParams,
  options?: LiveQueryHookOptions<QueryResult>,
): [QueryResult, QueryLoading]

export {}
