import { jsx } from 'react/jsx-runtime';
import DefaultEventSource from '@sanity/eventsource';
import { groqStore } from '@sanity/groq-store';
import { memo, useState, useMemo, useEffect } from 'react';
import { defineListenerContext, LoadedListenersContext, IsEnabledContext } from '../context.js';
import { useLoadingListenersContext, DEFAULT_MAX_DOCUMENTS, getQueryCacheKey } from '../utils.js';
const GroqStoreProviderInternal = memo(function GroqStoreProvider(props) {
  const {
    children,
    logger,
    // The rest is the store config
    ...config
  } = props;
  const [ready] = useState(() => /* @__PURE__ */new Set());
  const [loadedListenersContext, updateLoadedListeners] = useLoadingListenersContext(ready);
  const [snapshots] = useState(() => /* @__PURE__ */new Map());
  const [store] = useState(() => groqStore({
    // Override some of the store defaults
    EventSource: props.token ? DefaultEventSource : void 0,
    listen: true,
    overlayDrafts: true,
    documentLimit: DEFAULT_MAX_DOCUMENTS,
    // Spread in the rest
    ...config
  }));
  const report = useMemo(() => {
    if (config.listen) {
      return "Updates are applied in real-time. The cache is set to max ".concat(config.documentLimit || DEFAULT_MAX_DOCUMENTS, " documents.");
    }
    return "Updates require a manual refresh. The cache is set to max ".concat(config.documentLimit || DEFAULT_MAX_DOCUMENTS, " documents.");
  }, [config.documentLimit, config.listen]);
  useEffect(() => {
    if (logger) {
      logger.log("[@sanity/preview-kit]: With the current configuration you can expect that: ".concat(report));
    }
  }, [logger, report]);
  const [error, setError] = useState(null);
  if (error) throw error;
  const [listenerContext] = useState(() => {
    return function defineListener(initialSnapshot, query, params) {
      const key = getQueryCacheKey(query, params);
      if (!snapshots.has(key)) {
        snapshots.set(key, initialSnapshot);
      }
      const subscribe = onStoreChange => {
        if (!ready.has(key)) {
          store.query(query, params).then(result => {
            if (!ready.has(key)) {
              snapshots.set(key, result);
              ready.add(key);
              updateLoadedListeners();
              onStoreChange();
            }
          }, setError);
        }
        if (!config.listen) {
          return () => {};
        }
        const subscription = store.subscribe(query, params, (err, result) => {
          if (err) {
            setError(err);
          } else if (ready.has(key)) {
            snapshots.set(key, result);
            onStoreChange();
          }
        });
        return () => subscription.unsubscribe();
      };
      const getSnapshot = () => snapshots.get(key);
      return {
        subscribe,
        getSnapshot
      };
    };
  });
  return /* @__PURE__ */jsx(defineListenerContext.Provider, {
    value: listenerContext,
    children: /* @__PURE__ */jsx(LoadedListenersContext.Provider, {
      value: loadedListenersContext,
      children: /* @__PURE__ */jsx(IsEnabledContext.Provider, {
        value: true,
        children
      })
    })
  });
});
const GroqStoreProvider2 = memo(function GroqStoreProvider3(props) {
  var _a;
  const {
    children,
    client,
    cache,
    logger
  } = props;
  const {
    projectId,
    dataset,
    token,
    // eslint-disable-next-line no-warning-comments
    // @TODO @sanity/groq-store should handle `perspective` directly
    perspective = "previewDrafts",
    requestTagPrefix
  } = useMemo(() => client.config(), [client]);
  return /* @__PURE__ */jsx(GroqStoreProviderInternal, {
    projectId,
    dataset,
    token,
    logger,
    listen: (_a = cache == null ? void 0 : cache.listen) != null ? _a : true,
    documentLimit: cache == null ? void 0 : cache.maxDocuments,
    overlayDrafts: perspective === "previewDrafts",
    includeTypes: cache == null ? void 0 : cache.includeTypes,
    requestTagPrefix,
    children
  });
});
GroqStoreProvider2.displayName = "GroqStoreProvider";
var GroqStoreProvider2$1 = GroqStoreProvider2;
export { GroqStoreProvider2$1 as default };
//# sourceMappingURL=GroqStoreProvider.js.map
