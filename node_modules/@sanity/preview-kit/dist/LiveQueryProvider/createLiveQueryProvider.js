import { jsx } from 'react/jsx-runtime';
import { memo, useState, useEffect, Suspense, useMemo } from 'react';
import { DEFAULT_TAG, DEFAULT_MAX_DOCUMENTS } from '../utils.js';
function createLiveQueryProvider(options) {
  const {
    GroqStoreProvider,
    LiveStoreProvider
  } = options;
  const SelectStoreProvider = memo(props => {
    var _a;
    const {
      children,
      refreshInterval,
      client,
      cache,
      logger
    } = props;
    const maxDocuments = (_a = cache == null ? void 0 : cache.maxDocuments) != null ? _a : DEFAULT_MAX_DOCUMENTS;
    const [documentsCount, setDocumentsCount] = useState(null);
    const [error, setError] = useState(null);
    const [includeTypes] = useState(() => {
      var _a2;
      return (_a2 = cache == null ? void 0 : cache.includeTypes) != null ? _a2 : [];
    });
    if (error) {
      throw error;
    }
    useEffect(() => {
      if (documentsCount !== null) {
        return;
      }
      logger == null ? void 0 : logger.log("[@sanity/preview-kit]: fetch documents count");
      const controller = new AbortController();
      client.fetch(includeTypes.length > 0 ? "count(*[_type in $includeTypes])" : "count(*)", {
        includeTypes
      }, {
        filterResponse: true,
        signal: controller.signal
      }).then(result => {
        logger == null ? void 0 : logger.log("[@sanity/preview-kit]: documents count", result);
        setDocumentsCount(result);
      }).catch(error2 => {
        if (error2.name !== "AbortError") {
          setError(error2);
        }
      });
      return () => {
        controller.abort();
      };
    }, [client, documentsCount, includeTypes, logger]);
    if (documentsCount === null) {
      return children;
    }
    if (refreshInterval && documentsCount >= maxDocuments) {
      return /* @__PURE__ */jsx(Suspense, {
        fallback: children,
        children: /* @__PURE__ */jsx(LiveStoreProvider, {
          client,
          refreshInterval,
          turboSourceMap: false,
          logger,
          children
        })
      });
    }
    if (documentsCount >= maxDocuments) {
      throw new Error("[@sanity/preview-kit]: You have ".concat(documentsCount, " documents in your dataset, which is more than the maximum of ").concat(maxDocuments, " documents. Please reduce the number of documents in your dataset or increase the limit."));
    }
    return /* @__PURE__ */jsx(Suspense, {
      fallback: children,
      children: /* @__PURE__ */jsx(GroqStoreProvider, {
        ...props,
        children
      })
    });
  });
  SelectStoreProvider.displayName = "SelectStoreProvider";
  const LiveQueryProvider = memo(props => {
    const {
      children,
      refreshInterval = 1e4,
      token
    } = props;
    if (!props.client) {
      throw new Error("Missing a `client` prop with a configured Sanity client instance");
    }
    const [client] = useState(() => props.client.withConfig({
      requestTagPrefix: props.client.config().requestTagPrefix || DEFAULT_TAG,
      // Set the recommended defaults, this is a convenience to make it easier to share a client config from a server component to the client component
      ...(token && {
        token,
        useCdn: false,
        perspective: "previewDrafts",
        ignoreBrowserTokenWarning: true
      })
    }));
    const [cache] = useState(() => props.cache);
    const [logger] = useState(() => props.logger);
    const turboSourceMap = useMemo(() => {
      var _a;
      return (_a = props.turboSourceMap) != null ? _a : client.config().resultSourceMap;
    }, [client, props.turboSourceMap]);
    if (turboSourceMap) {
      return /* @__PURE__ */jsx(Suspense, {
        fallback: children,
        children: /* @__PURE__ */jsx(LiveStoreProvider, {
          client,
          logger,
          refreshInterval,
          turboSourceMap,
          children
        })
      });
    }
    return /* @__PURE__ */jsx(Suspense, {
      fallback: children,
      children: /* @__PURE__ */jsx(SelectStoreProvider, {
        client,
        cache,
        logger,
        refreshInterval,
        children
      })
    });
  });
  LiveQueryProvider.displayName = "LiveQueryProvider";
  return LiveQueryProvider;
}
export { createLiveQueryProvider };
//# sourceMappingURL=createLiveQueryProvider.js.map
