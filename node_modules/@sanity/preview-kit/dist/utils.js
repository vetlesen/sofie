import { useReducer, useRef, useCallback, startTransition, useEffect, useMemo } from 'react';
function getQueryCacheKey(query, params) {
  return "".concat(query, "-").concat(JSON.stringify(params));
}
function useParams(params) {
  const stringifiedParams = useMemo(() => JSON.stringify(params || {}), [params]);
  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams]);
}
function useLoadingListenersContext(ready) {
  const [tick, forceUpdate] = useReducer(x => x + 1, 0);
  const mountedRef = useRef(true);
  const scheduleUpdate = useCallback(() => {
    if (mountedRef.current) {
      startTransition(() => forceUpdate());
    }
  }, []);
  useEffect(() => {
    mountedRef.current = true;
    scheduleUpdate();
    return () => {
      mountedRef.current = false;
    };
  }, [scheduleUpdate]);
  const loadedListenersContext = useMemo(() => tick ? [...ready] : [], [ready, tick]);
  return [loadedListenersContext, scheduleUpdate];
}
const DEFAULT_MAX_DOCUMENTS = 3e3;
const DEFAULT_TAG = "sanity.preview-kit";
export { DEFAULT_MAX_DOCUMENTS, DEFAULT_TAG, getQueryCacheKey, useLoadingListenersContext, useParams };
//# sourceMappingURL=utils.js.map
