import { createClient as createClient$1, SanityClient } from '@sanity/client';
import { createHttpRequest } from './request.js';
const createClient = config => {
  var _a, _b;
  const {
    encodeSourceMap = detectEnableSourceMap(),
    encodeSourceMapAtPath,
    studioUrl = detectStudioUrl(),
    logger,
    ...options
  } = config;
  let shouldEncodeSourceMap = encodeSourceMap === true;
  if (encodeSourceMap === "auto") {
    shouldEncodeSourceMap = isVercelPreviewEnvironment();
  }
  if (typeof encodeSourceMap === "string" && encodeSourceMap !== "auto") {
    throw new Error("Invalid value for encodeSourceMap: ".concat(encodeSourceMap, ". Did you mean 'auto'?"));
  }
  try {
    if (shouldEncodeSourceMap && config.resultSourceMap !== false) {
      if (!studioUrl) {
        (_a = logger == null ? void 0 : logger.error) == null ? void 0 : _a.call(logger, "[@sanity/preview-kit]: Content source map enabled client is enabled, but no studioUrl is provided. Falling back to @sanity/client");
        return createClient$1(options);
      }
      (_b = logger == null ? void 0 : logger.debug) == null ? void 0 : _b.call(logger, "[@sanity/preview-kit]: Creating source map enabled client");
      const httpRequest = createHttpRequest({
        encodeSourceMapAtPath,
        studioUrl,
        logger
      });
      return new SanityClient(httpRequest, {
        ...options,
        // Source maps by Content Lake are required in order to know where to insert the encoded source maps into strings
        resultSourceMap: true
      });
    }
  } catch (err) {
    console.error("[@sanity/preview-kit]: Error creating client", err, "falling back to non-embedded sourcemap mode");
  }
  return createClient$1(options);
};
function isVercelPreviewEnvironment() {
  try {
    return import.meta.env.VERCEL_ENV === "preview";
  } catch {}
  try {
    return process.env.VERCEL_ENV === "preview";
  } catch {}
  return false;
}
function detectEnableSourceMap() {
  try {
    return import.meta.env.SANITY_SOURCE_MAP === "true" || "auto";
  } catch {}
  try {
    return process.env.SANITY_SOURCE_MAP === "true" || "auto";
  } catch {}
  return "auto";
}
function detectStudioUrl() {
  try {
    return import.meta.env.SANITY_STUDIO_URL;
  } catch {}
  try {
    return process.env.SANITY_STUDIO_URL;
  } catch {}
}
export { createClient };
//# sourceMappingURL=createClient.js.map
