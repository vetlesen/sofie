'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var color = require('@sanity/color');
var demo = require('@sanity/demo');
function _buildTailwindColorTints(tints) {
  return Object.fromEntries(Object.entries(tints).map(_ref => {
    let [tintKey, tint] = _ref;
    return [tintKey, tint.hex];
  }));
}
const _round = num => num.toFixed(7).replace(/(\.[0-9]+?)0+$/, "$1").replace(/\.0$/, "");
const _rem = px => "".concat(_round(px / 16), "rem");
const theme = {
  extend: {
    spacing: {
      1: "".concat(demo.space[1], "px"),
      2: "".concat(demo.space[2], "px"),
      3: "".concat(demo.space[3], "px"),
      4: "".concat(demo.space[4], "px"),
      5: "".concat(demo.space[5], "px"),
      6: "".concat(demo.space[6], "px"),
      7: "".concat(demo.space[7], "px"),
      8: "".concat(demo.space[8], "px"),
      9: "".concat(demo.space[9], "px")
    },
    typography: {
      DEFAULT: {
        css: {
          "--tw-prose-body": color.black.hex,
          "--tw-prose-headings": color.black.hex,
          "--tw-prose-lead": color.black.hex,
          "--tw-prose-links": color.black.hex,
          "--tw-prose-bold": color.black.hex,
          "--tw-prose-counters": color.black.hex,
          "--tw-prose-bullets": color.black.hex,
          "--tw-prose-hr": color.black.hex,
          "--tw-prose-quotes": color.black.hex,
          "--tw-prose-quote-borders": color.black.hex,
          "--tw-prose-captions": color.black.hex,
          "--tw-prose-code": color.black.hex,
          "--tw-prose-pre-code": color.white.hex,
          "--tw-prose-pre-bg": color.black.hex,
          "--tw-prose-th-borders": color.black.hex,
          "--tw-prose-td-borders": color.black.hex,
          "--tw-prose-invert-body": color.white.hex,
          "--tw-prose-invert-headings": color.white.hex,
          "--tw-prose-invert-lead": color.white.hex,
          "--tw-prose-invert-links": color.white.hex,
          "--tw-prose-invert-bold": color.white.hex,
          "--tw-prose-invert-counters": color.white.hex,
          "--tw-prose-invert-bullets": color.white.hex,
          "--tw-prose-invert-hr": color.white.hex,
          "--tw-prose-invert-quotes": color.white.hex,
          "--tw-prose-invert-quote-borders": color.white.hex,
          "--tw-prose-invert-captions": color.white.hex,
          "--tw-prose-invert-code": color.white.hex,
          "--tw-prose-invert-pre-code": color.black.hex,
          "--tw-prose-invert-pre-bg": color.white.hex,
          "--tw-prose-invert-th-borders": color.white.hex,
          "--tw-prose-invert-td-borders": color.white.hex,
          blockquote: {
            fontWeight: "inherit",
            fontStyle: "normal"
          }
        }
      },
      sm: {
        css: {
          pre: {
            borderRadius: _rem(demo.radius[2])
          }
        }
      },
      base: {
        css: {
          pre: {
            borderRadius: _rem(demo.radius[2])
          }
        }
      },
      lg: {
        css: {
          pre: {
            borderRadius: _rem(demo.radius[2])
          }
        }
      },
      xl: {
        css: {
          pre: {
            borderRadius: _rem(demo.radius[2])
          }
        }
      },
      "2xl": {
        css: {
          pre: {
            borderRadius: _rem(demo.radius[2])
          }
        }
      }
    }
  },
  borderRadius: {
    none: "".concat(demo.radius[0]),
    sm: "".concat(demo.radius[1], "px"),
    DEFAULT: "".concat(demo.radius[2], "px"),
    md: "".concat(demo.radius[3], "px"),
    lg: "".concat(demo.radius[4], "px"),
    full: "9999px"
  },
  colors: {
    transparent: "transparent",
    current: "currentColor",
    white: color.white.hex,
    black: color.black.hex,
    gray: _buildTailwindColorTints(color.hues.gray),
    blue: _buildTailwindColorTints(color.hues.blue),
    purple: _buildTailwindColorTints(color.hues.purple),
    magenta: _buildTailwindColorTints(color.hues.magenta),
    red: _buildTailwindColorTints(color.hues.red),
    orange: _buildTailwindColorTints(color.hues.orange),
    yellow: _buildTailwindColorTints(color.hues.yellow),
    green: _buildTailwindColorTints(color.hues.green),
    cyan: _buildTailwindColorTints(color.hues.cyan)
  },
  fontFamily: demo.fontFamily,
  screens: {
    sm: "".concat(demo.screen[0], "px"),
    md: "".concat(demo.screen[1], "px"),
    lg: "".concat(demo.screen[2], "px"),
    xl: "".concat(demo.screen[3], "px"),
    "2xl": "".concat(demo.screen[4], "px")
  }
};
exports.theme = theme;
//# sourceMappingURL=tailwind.cjs.map
