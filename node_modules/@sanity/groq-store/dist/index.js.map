{"version":3,"file":"index.js","sources":["../src/listen.ts","../src/drafts.ts","../src/patch.ts","../src/utils.ts","../src/syncingDataset.ts","../src/groqStore.ts","../src/exportUtils.ts","../src/node/getDocuments.ts","../src/node/support.ts","../src/index.ts"],"sourcesContent":["import {Subscription, MutationEvent, Config, ApiError, EnvImplementations} from './types'\nimport type BrowserEventSource from '@sanity/eventsource/browser'\nimport type NodeEventSource from '@sanity/eventsource/node'\n\ntype EventSourceInstance = InstanceType<EnvImplementations['EventSource']>\n\n// The events used by Content Lake: https://www.sanity.io/docs/listening\nexport interface SharedEventSourceEventMap {\n  welcome: MessageEvent\n  mutation: MessageEvent\n  channelError: MessageEvent\n  disconnect: MessageEvent\n  error: Event\n}\ndeclare module 'event-source-polyfill' {\n  export interface EventSourceEventMap extends SharedEventSourceEventMap {}\n}\n\nconst isNativeBrowserEventSource = (\n  eventSource: EventSourceInstance,\n): eventSource is InstanceType<typeof globalThis.EventSource> =>\n  typeof window !== 'undefined' &&\n  eventSource.addEventListener === window.EventSource.prototype.addEventListener\n\nconst isPolyfillEventSource = (\n  eventSource: EventSourceInstance,\n): eventSource is InstanceType<typeof BrowserEventSource | typeof NodeEventSource> =>\n  !isNativeBrowserEventSource(eventSource)\n\nconst addEventSourceListener = (\n  eventSource: EventSourceInstance,\n  type: keyof SharedEventSourceEventMap,\n  listener: EventListener,\n): void => {\n  if (isPolyfillEventSource(eventSource)) {\n    // Polyfilled event source does not accept option parameter\n    eventSource.addEventListener(type, listener as any)\n  } else {\n    eventSource.addEventListener(type, listener, false)\n  }\n}\n\nconst encodeQueryString = ({\n  query,\n  params = {},\n  options = {},\n}: {\n  query: string\n  params?: Record<string, unknown>\n  options?: Record<string, unknown>\n}) => {\n  const searchParams = new URLSearchParams()\n  // We generally want tag at the start of the query string\n  const {tag, ...opts} = options\n  if (tag) searchParams.set('tag', tag as string)\n  searchParams.set('query', query)\n\n  // Iterate params, the keys are prefixed with `$` and their values JSON stringified\n  for (const [key, value] of Object.entries(params)) {\n    searchParams.set(`$${key}`, JSON.stringify(value))\n  }\n  // Options are passed as-is\n  for (const [key, value] of Object.entries(opts)) {\n    // Skip falsy values\n    if (value) searchParams.set(key, `${value}`)\n  }\n\n  return `?${searchParams}`\n}\n\nexport function listen(\n  EventSourceImpl: EnvImplementations['EventSource'],\n  config: Config,\n  handlers: {\n    open: () => void\n    error: (err: Error) => void\n    next: (event: MutationEvent) => void\n  },\n): Subscription {\n  const {projectId, dataset, token, includeTypes, requestTagPrefix} = config\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n\n  // Make sure we only listen to mutations on documents part of the `includeTypes` allowlist, if provided\n  const options = requestTagPrefix\n    ? {tag: requestTagPrefix, effectFormat: 'mendoza'}\n    : {effectFormat: 'mendoza'}\n  const searchParams = encodeQueryString(\n    Array.isArray(includeTypes) && includeTypes.length > 0\n      ? {\n          query: `*[_type in $includeTypes]`,\n          params: {includeTypes},\n          options,\n        }\n      : {query: '*', options},\n  )\n  const url = `https://${projectId}.api.sanity.io/v1/data/listen/${dataset}${searchParams}`\n  const es = new EventSourceImpl(url, {withCredentials: true, headers})\n\n  addEventSourceListener(es, 'welcome', handlers.open)\n\n  addEventSourceListener(es, 'mutation', getMutationParser(handlers.next))\n\n  addEventSourceListener(es, 'channelError', (msg: any) => {\n    es.close()\n\n    let data\n    try {\n      data = JSON.parse(msg.data) as ApiError\n    } catch (err) {\n      handlers.error(new Error('Unknown error parsing listener message'))\n      return\n    }\n\n    handlers.error(\n      new Error(data.message || data.error || `Listener returned HTTP ${data.statusCode}`),\n    )\n  })\n\n  addEventSourceListener(es, 'error', (err: Event) => {\n    const origin = typeof window !== 'undefined' && window.location.origin\n    const hintSuffix = origin ? `, and that the CORS-origin (${origin}) is allowed` : ''\n    const errorMessage = isErrorLike(err) ? ` (${err.message})` : ''\n    handlers.error(\n      new Error(\n        `Error establishing listener - check that the project ID and dataset are correct${hintSuffix}${errorMessage}`,\n      ),\n    )\n  })\n\n  return {\n    unsubscribe: (): Promise<void> => Promise.resolve(es.close()),\n  }\n}\n\nfunction getMutationParser(cb: (event: MutationEvent) => void): (msg: any) => void {\n  return (msg: any) => {\n    let data\n    try {\n      data = JSON.parse(msg.data)\n    } catch (err) {\n      // intentional noop\n      return\n    }\n\n    cb(data)\n  }\n}\n\nfunction isErrorLike(err: unknown): err is {message: string} {\n  return typeof err === 'object' && err !== null && 'message' in err\n}\n","import {SanityDocument} from '@sanity/types'\n\nexport function isDraft(doc: SanityDocument): boolean {\n  return doc._id.startsWith('drafts.')\n}\n\nexport function getPublishedId(document: SanityDocument): string {\n  return isDraft(document) ? document._id.slice(7) : document._id\n}\n","import {SanityDocument} from '@sanity/types'\nimport {applyPatch} from 'mendoza'\n\nexport function applyPatchWithoutRev(\n  doc: SanityDocument | null,\n  patch: unknown[],\n): SanityDocument | null {\n  const patchDoc = {...doc} as Omit<SanityDocument, '_rev'>\n  delete patchDoc._rev\n  return applyPatch(patchDoc, patch)\n}\n","export function compareString(a: string, b: string): number {\n  if (a > b) return 1\n  if (a < b) return -1\n  return 0\n}\n","import {SanityDocument} from '@sanity/types'\nimport {listen} from './listen'\nimport {getPublishedId} from './drafts'\nimport {applyPatchWithoutRev} from './patch'\nimport {Config, EnvImplementations, MutationEvent, Subscription} from './types'\nimport {compareString} from './utils'\n\nconst DEBOUNCE_MS = 25\n\nfunction noop() {\n  return Promise.resolve()\n}\n\nexport function getSyncingDataset(\n  config: Config,\n  onNotifyUpdate: (docs: SanityDocument[]) => void,\n  {getDocuments, EventSource}: EnvImplementations,\n): Subscription & {loaded: Promise<void>} {\n  const {\n    projectId,\n    dataset,\n    listen: useListener,\n    overlayDrafts,\n    documentLimit,\n    token,\n    includeTypes,\n    requestTagPrefix,\n  } = config\n\n  // We don't want to flush updates while we're in the same transaction, so a normal\n  // throttle/debounce wouldn't do it. We need to wait and see if the next mutation is\n  // within the same transaction as the previous, and if not we can flush. Of course,\n  // we can't wait forever, so an upper threshold of X ms should be counted as \"ok to flush\"\n  let stagedDocs: SanityDocument[] | undefined\n  let previousTrx: string | undefined\n  let flushTimeout: NodeJS.Timer | undefined\n\n  const onUpdate = (docs: SanityDocument[]) => {\n    stagedDocs = undefined\n    flushTimeout = undefined\n    previousTrx = undefined\n    const finalDocs = overlayDrafts ? overlay(docs) : docs\n    finalDocs.sort((a, b) => compareString(a._id, b._id))\n    onNotifyUpdate(finalDocs)\n  }\n\n  if (!useListener) {\n    const loaded = getDocuments({\n      projectId,\n      dataset,\n      documentLimit,\n      token,\n      includeTypes,\n      requestTagPrefix,\n    })\n      .then(onUpdate)\n      .then(noop)\n    return {unsubscribe: noop, loaded}\n  }\n\n  const indexedDocuments = new Map<string, SanityDocument>()\n\n  // undefined until the listener has been set up and the initial export is done\n  let documents: SanityDocument[] | undefined\n\n  // holds any mutations that happen while fetching documents so they can be applied after updates\n  const buffer: MutationEvent[] = []\n\n  // Return a promise we can resolve once we've established a listener and reconciled any mutations\n  let onDoneLoading: () => void\n  let onLoadError: (error: Error) => void\n  const loaded = new Promise<void>((resolve, reject) => {\n    onDoneLoading = resolve\n    onLoadError = reject\n  })\n\n  const onOpen = async () => {\n    const initial = await getDocuments({\n      projectId,\n      dataset,\n      documentLimit,\n      token,\n      includeTypes,\n      requestTagPrefix,\n    })\n    documents = applyBufferedMutations(initial, buffer)\n    documents.forEach((doc) => indexedDocuments.set(doc._id, doc))\n    onUpdate(documents)\n    onDoneLoading()\n  }\n\n  const onMutationReceived = (msg: MutationEvent) => {\n    if (documents) {\n      applyMutation(msg)\n      scheduleUpdate(documents, msg)\n    } else {\n      buffer.push(msg)\n    }\n  }\n\n  const listener = listen(EventSource, config, {\n    next: onMutationReceived,\n    open: onOpen,\n    error: (error: Error) => onLoadError(error),\n  })\n\n  const scheduleUpdate = (docs: SanityDocument[], msg: MutationEvent) => {\n    clearTimeout(flushTimeout)\n\n    if (previousTrx !== msg.transactionId && stagedDocs) {\n      // This is a new transaction, meaning we can immediately flush any pending\n      // doc updates if there are any\n      onUpdate(stagedDocs)\n      previousTrx = undefined\n    } else {\n      previousTrx = msg.transactionId\n      stagedDocs = docs.slice()\n    }\n\n    flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice())\n  }\n\n  const applyMutation = (msg: MutationEvent) => {\n    if (!msg.effects || msg.documentId.startsWith('_.')) {\n      return\n    }\n\n    const document = indexedDocuments.get(msg.documentId) || null\n    replaceDocument(msg.documentId, applyPatchWithoutRev(document, msg.effects.apply))\n  }\n\n  const replaceDocument = (id: string, document: SanityDocument | null) => {\n    const current = indexedDocuments.get(id)\n    const docs = documents || []\n    const position = current ? docs.indexOf(current) : -1\n\n    if (position === -1 && document) {\n      // Didn't exist previously, but was now created. Add it.\n      docs.push(document)\n      indexedDocuments.set(id, document)\n    } else if (document) {\n      // Existed previously and still does. Replace it.\n      docs.splice(position, 1, document)\n      indexedDocuments.set(id, document)\n    } else {\n      // Existed previously, but is now deleted. Remove it.\n      docs.splice(position, 1)\n      indexedDocuments.delete(id)\n    }\n  }\n\n  return {unsubscribe: listener.unsubscribe, loaded}\n}\n\nfunction applyBufferedMutations(\n  documents: SanityDocument[],\n  mutations: MutationEvent[],\n): SanityDocument[] {\n  // Group by document ID\n  const groups = new Map<string, MutationEvent[]>()\n  mutations.forEach((mutation) => {\n    const group = groups.get(mutation.documentId) || []\n    group.push(mutation)\n    groups.set(mutation.documentId, group)\n  })\n\n  // Discard all mutations that happened before our current document\n  groups.forEach((group, id) => {\n    const document = documents.find((doc) => doc._id === id)\n    if (!document) {\n      // @todo handle\n      // eslint-disable-next-line no-console\n      console.warn('Received mutation for missing document %s', id)\n      return\n    }\n\n    // Mutations are sorted by timestamp, apply any that arrived after\n    // we fetched the initial documents\n    let hasFoundRevision = false\n    let current: SanityDocument | null = document\n    group.forEach((mutation) => {\n      hasFoundRevision = hasFoundRevision || mutation.previousRev === document._rev\n      if (!hasFoundRevision) {\n        return\n      }\n\n      if (mutation.effects) {\n        current = applyPatchWithoutRev(current, mutation.effects.apply)\n      }\n    })\n\n    // Replace the indexed documents\n    documents.splice(documents.indexOf(document), 1, current)\n  })\n\n  return documents\n}\n\nfunction overlay(documents: SanityDocument[]): SanityDocument[] {\n  const overlayed = new Map<string, SanityDocument>()\n\n  documents.forEach((doc) => {\n    const existing = overlayed.get(getPublishedId(doc))\n    if (doc._id.startsWith('drafts.')) {\n      // Drafts always overlay\n      overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc))\n    } else if (!existing) {\n      // Published documents only override if draft doesn't exist\n      overlayed.set(doc._id, {...doc, _originalId: doc._id})\n    }\n  })\n\n  return Array.from(overlayed.values())\n}\n\n// Strictly speaking it would be better to allow groq-js to resolve `draft.<id>`,\n// but for now this will have to do\nfunction pretendThatItsPublished(doc: SanityDocument): SanityDocument {\n  return {...doc, _id: getPublishedId(doc), _originalId: doc._id}\n}\n","import groq from 'groq'\nimport deepEqual from 'fast-deep-equal'\nimport {throttle} from 'throttle-debounce'\nimport {SanityDocument} from '@sanity/types'\nimport {parse, evaluate} from 'groq-js'\nimport {Config, EnvImplementations, GroqSubscription, GroqStore, Subscription} from './types'\nimport {getSyncingDataset} from './syncingDataset'\n\nexport function groqStore(config: Config, envImplementations: EnvImplementations): GroqStore {\n  let documents: SanityDocument[] = []\n  const executeThrottled = throttle(config.subscriptionThrottleMs || 50, executeAllSubscriptions)\n  const activeSubscriptions: GroqSubscription[] = []\n\n  let dataset: Subscription & {loaded: Promise<void>}\n\n  async function loadDataset() {\n    if (!dataset) {\n      dataset = getSyncingDataset(\n        config,\n        (docs) => {\n          documents = docs\n          executeThrottled()\n        },\n        envImplementations,\n      )\n    }\n\n    await dataset.loaded\n  }\n\n  async function query<R = any>(groqQuery: string, params?: Record<string, unknown>): Promise<R> {\n    await loadDataset()\n    const tree = parse(groqQuery, {params})\n    const result = await evaluate(tree as any, {dataset: documents, params})\n    return result.get()\n  }\n\n  async function getDocument(documentId: string): Promise<SanityDocument | null> {\n    await loadDataset()\n    return query(groq`*[_id == $id][0]`, {id: documentId})\n  }\n\n  async function getDocuments(documentIds: string[]): Promise<(SanityDocument | null)[]> {\n    await loadDataset()\n    const subQueries = documentIds.map((id) => `*[_id == \"${id}\"][0]`).join(',\\n')\n    return query(`[${subQueries}]`)\n  }\n\n  function subscribe<R = any>(\n    groqQuery: string,\n    params: Record<string, unknown>,\n    callback: (error: Error | undefined, result?: R) => void,\n  ): Subscription {\n    if (!config.listen) {\n      throw new Error('Cannot use `subscribe()` without `listen: true`')\n    }\n\n    // @todo Execute the query against an empty dataset for validation purposes\n\n    // Store the subscription so we can re-run the query on new data\n    const subscription = {query: groqQuery, params, callback}\n    activeSubscriptions.push(subscription)\n\n    let unsubscribed = false\n    const unsubscribe = () => {\n      if (unsubscribed) {\n        return Promise.resolve()\n      }\n\n      unsubscribed = true\n      activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)\n      return Promise.resolve()\n    }\n\n    executeQuerySubscription(subscription)\n    return {unsubscribe}\n  }\n\n  function executeQuerySubscription(subscription: GroqSubscription) {\n    return query(subscription.query, subscription.params)\n      .then((res) => {\n        if ('previousResult' in subscription && deepEqual(subscription.previousResult, res)) {\n          return\n        }\n\n        subscription.previousResult = res\n        subscription.callback(undefined, res)\n      })\n      .catch((err) => {\n        subscription.callback(err)\n      })\n  }\n\n  function executeAllSubscriptions() {\n    activeSubscriptions.forEach(executeQuerySubscription)\n  }\n\n  function close() {\n    executeThrottled.cancel()\n    return dataset ? dataset.unsubscribe() : Promise.resolve()\n  }\n\n  return {query, getDocument, getDocuments, subscribe, close}\n}\n","import {SanityDocument} from '@sanity/types'\nimport {ApiError, StreamError, StreamResult} from './types'\n\nexport function isStreamError(result: StreamResult | undefined): result is StreamError {\n  if (!result) {\n    return false\n  }\n\n  if (!('error' in result) || typeof result.error !== 'object' || result.error === null) {\n    return false\n  }\n\n  return (\n    'description' in result.error &&\n    typeof (result as StreamError).error.description === 'string' &&\n    !('_id' in result)\n  )\n}\n\nexport function getError(body: ApiError): string {\n  if (typeof body === 'object' && 'error' in body && 'message' in body) {\n    return body.message || body.error\n  }\n\n  return '<unknown error>'\n}\n\nexport function isRelevantDocument(doc: SanityDocument): boolean {\n  return !doc._id.startsWith('_.')\n}\n","import split from 'split2'\nimport get from 'simple-get'\nimport {SanityDocument} from '@sanity/types'\nimport {EnvImplementations, StreamResult} from '../types'\nimport {getError, isRelevantDocument, isStreamError} from '../exportUtils'\n\nexport const getDocuments: EnvImplementations['getDocuments'] = function getDocuments({\n  projectId,\n  dataset,\n  token,\n  documentLimit,\n  includeTypes = [],\n  requestTagPrefix,\n}: {\n  projectId: string\n  dataset: string\n  token?: string\n  documentLimit?: number\n  includeTypes?: string[]\n  requestTagPrefix?: string\n}): Promise<SanityDocument[]> {\n  const baseUrl = new URL(`https://${projectId}.api.sanity.io/v1/data/export/${dataset}`)\n  if (requestTagPrefix) {\n    baseUrl.searchParams.set('tag', requestTagPrefix)\n  }\n  if (includeTypes.length > 0) {\n    baseUrl.searchParams.set('types', includeTypes?.join(','))\n  }\n  const url = baseUrl.toString()\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n\n  return new Promise((resolve, reject) => {\n    get({url, headers}, (err, response) => {\n      if (err) {\n        reject(err)\n        return\n      }\n\n      response.setEncoding('utf8')\n\n      const chunks: Buffer[] = []\n      if (response.statusCode !== 200) {\n        response\n          .on('data', (chunk: Buffer) => chunks.push(chunk))\n          .on('end', () => {\n            const body = JSON.parse(Buffer.concat(chunks).toString('utf8'))\n            reject(new Error(`Error streaming dataset: ${getError(body)}`))\n          })\n        return\n      }\n\n      const documents: SanityDocument[] = []\n      response\n        .pipe(split(JSON.parse))\n        .on('data', (doc: StreamResult) => {\n          if (isStreamError(doc)) {\n            reject(new Error(`Error streaming dataset: ${doc.error}`))\n            return\n          }\n\n          if (doc && isRelevantDocument(doc)) {\n            documents.push(doc)\n          }\n\n          if (documentLimit && documents.length > documentLimit) {\n            reject(\n              new Error(`Error streaming dataset: Reached limit of ${documentLimit} documents`),\n            )\n            response.destroy()\n          }\n        })\n        .on('end', () => resolve(documents))\n    })\n  })\n}\n","export function assertEnvSupport(): void {\n  const [major] = process.version.replace(/^v/, '').split('.', 1).map(Number)\n  if (major < 14) {\n    throw new Error('Node.js version 14 or higher required')\n  }\n}\n","/**\n * Note: Entry point for _browser_ build is in browser/index.ts\n */\nimport EventSourcePolyfill from '@sanity/eventsource/node'\nimport {groqStore as groqStoreApi} from './groqStore'\nimport {Config, GroqStore} from './types'\nimport {getDocuments} from './node/getDocuments'\nimport {assertEnvSupport} from './node/support'\n\n/** @public */\nexport function groqStore(config: Config): GroqStore {\n  assertEnvSupport()\n\n  return groqStoreApi(config, {\n    EventSource: config.EventSource ?? EventSourcePolyfill,\n    getDocuments,\n  })\n}\n\nexport {default as groq} from 'groq'\nexport type {Subscription, GroqStore, Config, EnvImplementations} from './types'\n"],"names":["isNativeBrowserEventSource","eventSource","window","addEventListener","EventSource","prototype","isPolyfillEventSource","addEventSourceListener","type","listener","encodeQueryString","_ref","query","params","options","searchParams","URLSearchParams","tag","opts","set","key","value","Object","entries","JSON","stringify","concat","listen","EventSourceImpl","config","handlers","projectId","dataset","token","includeTypes","requestTagPrefix","headers","Authorization","effectFormat","Array","isArray","length","url","es","withCredentials","open","getMutationParser","next","msg","close","data","parse","err","error","Error","message","statusCode","origin","location","hintSuffix","errorMessage","isErrorLike","unsubscribe","Promise","resolve","cb","isDraft","doc","_id","startsWith","getPublishedId","document","slice","applyPatchWithoutRev","patch","patchDoc","_rev","applyPatch","compareString","a","b","DEBOUNCE_MS","noop","getSyncingDataset","onNotifyUpdate","_ref2","getDocuments","useListener","overlayDrafts","documentLimit","stagedDocs","previousTrx","flushTimeout","onUpdate","docs","finalDocs","overlay","sort","loaded","then","indexedDocuments","Map","documents","buffer","onDoneLoading","onLoadError","reject","onOpen","initial","applyBufferedMutations","forEach","onMutationReceived","applyMutation","scheduleUpdate","push","clearTimeout","transactionId","setTimeout","effects","documentId","get","replaceDocument","apply","id","current","position","indexOf","splice","delete","mutations","groups","mutation","group","find","console","warn","hasFoundRevision","previousRev","overlayed","existing","pretendThatItsPublished","_originalId","from","values","groqStore","groqStore$1","envImplementations","executeThrottled","throttle","subscriptionThrottleMs","executeAllSubscriptions","activeSubscriptions","loadDataset","groqQuery","tree","result","evaluate","getDocument","groq","_templateObject","_taggedTemplateLiteral","documentIds","subQueries","map","join","subscribe","callback","subscription","unsubscribed","executeQuerySubscription","res","deepEqual","previousResult","catch","cancel","isStreamError","description","getError","body","isRelevantDocument","getDocuments2","_ref3","baseUrl","URL","toString","default","response","setEncoding","chunks","on","chunk","Buffer","pipe","split","destroy","assertEnvSupport","major","process","version","replace","Number","_a","groqStoreApi","EventSourcePolyfill"],"mappings":"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"}