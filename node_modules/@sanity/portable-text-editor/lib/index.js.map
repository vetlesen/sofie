{"version":3,"file":"index.js","sources":["../src/utils/schema.ts","../src/utils/getPortableTextMemberSchemaTypes.ts","../src/utils/debug.ts","../src/editor/hooks/usePortableTextEditorKeyGenerator.ts","../src/utils/weakMaps.ts","../../../../node_modules/diff-match-patch/index.js","../src/patch/patches.ts","../src/utils/values.ts","../src/utils/operationToPatches.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/utils/withPreserveKeys.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/withoutPatching.ts","../src/patch/arrayInsert.ts","../src/patch/array.ts","../src/patch/object.ts","../src/patch/primitive.ts","../src/patch/string.ts","../src/patch/applyPatch.ts","../src/utils/patchToOperations.ts","../src/utils/bufferUntil.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/utils/validateValue.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/components/SlateContainer.tsx","../src/constants.ts","../src/editor/hooks/usePortableTextEditorSelection.ts","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/hooks/usePortableTextEditorValue.ts","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/editor/PortableTextEditor.tsx","../src/utils/patches.ts","../src/utils/selection.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/editor/components/Leaf.tsx","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/useForwardedRef.ts","../src/editor/Editable.tsx"],"sourcesContent":["import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as BlockSchemaType | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find((field) => field.name === 'children') as\n    | {type: ArraySchemaType}\n    | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error('Valid types for block children not found in schema (required)')\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter((memberType) => memberType.name !== 'span') ||\n    []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter((field) => field.name !== blockType.name) ||\n    []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === 'style')\n  if (!styleField) {\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\")\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter((style: {value: string}) => style.value)\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find((btField) => btField.name === 'list')\n  if (!listField) {\n    throw new Error(\"A field with name 'list' is not defined in the block type (required).\")\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {randomKey} from '@sanity/util/content'\nimport {createContext, useContext} from 'react'\n\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\n/**\n * A React context for sharing the editor's keyGenerator.\n */\nexport const PortableTextEditorKeyGeneratorContext =\n  createContext<() => string>(defaultKeyGenerator)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorKeyGenerator = (): (() => string) => {\n  const keyGenerator = useContext(PortableTextEditorKeyGeneratorContext)\n\n  if (keyGenerator === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorKeyGenerator\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return keyGenerator\n}\n","import {Editor, Element, Range, Text} from 'slate'\nimport {EditorSelection} from '..'\n\n/**\n * Dragging\n */\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> = new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<Editor, 'top' | 'bottom'> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<Range, EditorSelection>()\n","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","import {Path, PathSegment} from '@sanity/types'\nimport * as DMP from 'diff-match-patch'\n\nimport type {\n  SetIfMissingPatch,\n  InsertPatch,\n  InsertPosition,\n  SetPatch,\n  UnsetPatch,\n  DiffMatchPatch,\n} from '../types/patch'\n\nexport function setIfMissing(value: any, path: Path = []): SetIfMissingPatch {\n  return {\n    type: 'setIfMissing',\n    path,\n    value,\n  }\n}\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function diffMatchPatch(\n  currentValue: string,\n  nextValue: string,\n  path: Path = []\n): DiffMatchPatch {\n  const patch = dmp\n    .patch_make(currentValue, nextValue)\n    .map((_patch) => _patch.toString())\n    .join('')\n  return {type: 'diffMatchPatch', path, value: patch}\n}\n\nexport function insert(items: any[], position: InsertPosition, path: Path = []): InsertPatch {\n  return {\n    type: 'insert',\n    path,\n    position,\n    items,\n  }\n}\n\nexport function set(value: any, path: Path = []): SetPatch {\n  return {type: 'set', path, value}\n}\n\nexport function unset(path: Path = []): UnsetPatch {\n  return {type: 'unset', path}\n}\n\nexport function prefixPath<T extends {path: Path}>(patch: T, segment: PathSegment): T {\n  return {\n    ...patch,\n    path: [segment, ...patch.path],\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Node, Element, Text, Descendant} from 'slate'\nimport {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nconst EMPTY_MARKDEFS: PortableTextObject[] = []\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {}\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [{_key: `${_key}-void-child`, _type: 'span', text: '', marks: []}]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const children = textBlock.children.map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap\n            )\n          }\n          // Original object\n          return child\n        })\n        if (!hasMissingStyle && !hasMissingMarkDefs && !hasInlines && Element.isElement(block)) {\n          // Original object\n          return block\n        }\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        if (hasMissingMarkDefs) {\n          rest.markDefs = EMPTY_MARKDEFS\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: (Node | Partial<Node>)[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {}\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (_type === textBlockType && 'children' in block && Array.isArray(block.children) && _key) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest} = child\n          return keepObjectEquality({...rest, ...v, _key: k as string, _type: t as string}, keyMap)\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality({...block, children, _key, _type}, keyMap) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[]\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) => Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment)\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) => isEqual({_key: child._key}, secondPathSegment))\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[]\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {omitBy, isUndefined, get} from 'lodash'\nimport {\n  Editor,\n  MoveNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  InsertNodeOperation,\n  SplitNodeOperation,\n  RemoveNodeOperation,\n  MergeNodeOperation,\n  Descendant,\n} from 'slate'\nimport {set, insert, unset, diffMatchPatch, setIfMissing} from '../patch/PatchEvent'\nimport type {Patch, InsertPosition} from '../types/patch'\nimport {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {fromSlateValue} from './values'\nimport {debugWithName} from './debug'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(types: PortableTextMemberSchemaTypes): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: Editor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    debug('Operation', JSON.stringify(operation, null, 2))\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: Editor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child = (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child) ? child : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(editor: Editor, operation: SetNodeOperation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined\n      )\n      return [set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}])]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          Object.keys(operation.newProperties).forEach((keyName) => {\n            const val = get(operation.newProperties, keyName)\n            patches.push(set(val, [{_key: blockKey}, 'children', {_key: childKey}, keyName]))\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function insertNodePatch(\n    editor: Editor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[]\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert([fromSlateValue([operation.node], textBlockName)[0]], position, [\n            {_key: targetKey},\n          ]),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert([fromSlateValue([operation.node], textBlockName)[0]], 'before', [operation.path[0]]),\n      ]\n    } else if (operation.path.length === 2 && editor.children[operation.path[0]]) {\n      if (!editor.isTextBlock(block)) {\n        throw new Error('Invalid block')\n      }\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after'\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [operation.node as Descendant],\n          },\n        ],\n        textBlockName\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)} - ${JSON.stringify(\n        beforeValue\n      )}`\n    )\n  }\n\n  function splitNodePatch(\n    editor: Editor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0]\n        )} is not a text block and can't be split`\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName\n        )[0]\n        if (targetValue) {\n          patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2),\n              } as Descendant,\n            ],\n            textBlockName\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ])\n        )\n        patches.push(\n          set(splitSpan.text, [{_key: splitBlock._key}, 'children', {_key: splitSpan._key}, 'text'])\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: Editor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (operation.path.length === 2) {\n      const spanToRemove =\n        editor.isTextBlock(block) && block.children && block.children[operation.path[1]]\n      if (spanToRemove) {\n        return [unset([{_key: block._key}, 'children', {_key: spanToRemove._key}])]\n      }\n      // If it was not there before, do nothing\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function mergeNodePatch(\n    editor: Editor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n    if (operation.path.length === 1) {\n      const block = beforeValue[operation.path[0]]\n      const targetKey = block && block._key\n      if (targetKey) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: targetKey}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (operation.path.length === 2) {\n      const block = beforeValue[operation.path[0]]\n      const mergedSpan =\n        (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n      const targetBlock = editor.children[operation.path[0]]\n      if (!editor.isTextBlock(targetBlock)) {\n        throw new Error('Invalid block')\n      }\n      const targetSpan = targetBlock.children[operation.path[1] - 1]\n      if (editor.isTextSpan(targetSpan)) {\n        // Set the merged span with it's new value\n        patches.push(\n          set(targetSpan.text, [{_key: block._key}, 'children', {_key: targetSpan._key}, 'text'])\n        )\n        if (mergedSpan) {\n          patches.push(unset([{_key: block._key}, 'children', {_key: mergedSpan._key}]))\n        }\n      }\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n    return patches\n  }\n\n  function moveNodePatch(editor: Editor, operation: MoveNodeOperation, beforeValue: Descendant[]) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition = operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [{_key: targetBlock._key}])\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n      const childToInsert = (fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock)\n        .children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ])\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Point, Path as SlatePath, Element} from 'slate'\nimport {isKeySegment, Path} from '@sanity/types'\nimport {EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\nimport {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath) as Path\n}\n\nexport function createArrayedPath(point: EditorSelectionPoint, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => isKeySegment(point.path[0]) && n._key === point.path[0]._key,\n    })\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return blockPath\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) => isEqual([{_key: child._key}], childPath))\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {BaseRange, Editor, Range} from 'slate'\nimport {EditorSelection, EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  return anchor && focus ? {anchor, focus} : null\n}\n\nexport function toSlateRange(selection: EditorSelection, editor: Editor): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n","import {Text, Range, Transforms, Editor, Element as SlateElement, Node} from 'slate'\nimport {\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SchemaType,\n} from '@sanity/types'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {DOMNode} from '@sanity/slate-react/dist/utils/dom'\nimport {\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {toSlateValue, fromSlateValue} from '../../utils/values'\nimport {toSlateRange, toPortableTextRange} from '../../utils/ranges'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  portableTextEditor: PortableTextEditor,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withEditableAPI(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        // Make a selection if missing\n        if (!editor.selection) {\n          const point = {path: [0, 0], offset: 0}\n          Transforms.select(editor, {focus: point, anchor: point})\n          editor.onChange()\n        }\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editor.pteToggleMark(mark)\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return editor.pteIsMarkActive(mark)\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          // Try/catch this, as Slate may error because the selection is currently wrong\n          // TODO: catch only relevant error from Slate\n          try {\n            const [block] = Array.from(\n              Editor.nodes(editor, {\n                at: editor.selection.focus,\n                match: (n) => Editor.isBlock(editor, n),\n              })\n            )[0] || [undefined]\n            if (block) {\n              return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0]\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          try {\n            const [node] = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: editor.selection.focus,\n                match: (n) => n._type !== undefined,\n                voids: true,\n              })\n            )[0] || [undefined]\n            if (node && !Editor.isBlock(editor, node)) {\n              const pseudoBlock: PortableTextBlock = {\n                _key: 'pseudo',\n                _type: types.block.name,\n                children: [node],\n              }\n              const blocks = fromSlateValue(\n                [pseudoBlock],\n                types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor)\n              )\n              if (editor.isTextBlock(blocks[0])) {\n                return blocks[0].children[0]\n              }\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      insertChild: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus,\n            match: (n) => Editor.isBlock(editor, n),\n          })\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focus block')\n        }\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          throw new Error(\"Can't insert childs into block objects\")\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: types.block.name,\n              children: [\n                {\n                  _key: keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        Editor.insertNode(editor, child as Node)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )?.focus.path || []\n        )\n      },\n      insertBlock: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as Node\n        Editor.insertNode(editor, block)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![types.block.name, types.span.name].includes(element._type)\n      },\n      findByPath: (\n        path: Path\n      ): [PortableTextBlock | PortableTextChild | undefined, Path | undefined] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(editor, slatePath.focus.path.slice(0, 1))\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [fromSlateValue([block], types.block.name)[0], [{_key: block._key}]]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            )[0]\n            if (editor.isTextBlock(ptBlock)) {\n              const ptChild = ptBlock.children[slatePath.focus.path[1]]\n              if (ptChild) {\n                return [ptChild, [{_key: block._key}, 'children', {_key: ptChild._key}]]\n              }\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (element: PortableTextBlock | PortableTextChild): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || []\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch (err) {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextObject[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextObject[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs?.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch (err) {\n          return []\n        }\n      },\n      addAnnotation: (\n        type: ObjectSchemaType,\n        value?: {[prop: string]: unknown}\n      ): {spanPath: Path; markDefPath: Path} | undefined => {\n        const {selection} = editor\n        if (selection) {\n          const [block] = Editor.node(editor, selection.focus, {depth: 1})\n          if (SlateElement.isElement(block) && block._type === types.block.name) {\n            const annotationKey = keyGenerator()\n            if (editor.isTextBlock(block)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  markDefs: [\n                    ...(block.markDefs || []),\n                    {_type: type.name, _key: annotationKey, ...value} as PortableTextObject,\n                  ],\n                },\n                {at: selection.focus}\n              )\n              editor.onChange()\n              if (Range.isCollapsed(selection)) {\n                editor.pteExpandToWord()\n                editor.onChange()\n              }\n              const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n              if (editor.selection) {\n                Editor.withoutNormalizing(editor, () => {\n                  // Split if needed\n                  Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n                  if (editor.selection && Text.isText(textNode)) {\n                    Transforms.setNodes(\n                      editor,\n                      {\n                        marks: [...((textNode.marks || []) as string[]), annotationKey],\n                      },\n                      {\n                        at: editor.selection,\n                        match: (n) => n._type === types.span.name,\n                      }\n                    )\n                    editor.onChange()\n                  }\n                })\n                Editor.normalize(editor)\n                editor.onChange()\n                const newSelection = toPortableTextRange(\n                  fromSlateValue(\n                    editor.children,\n                    types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor)\n                  ),\n                  editor.selection,\n                  types\n                )\n                // eslint-disable-next-line max-depth\n                if (newSelection && typeof block._key === 'string') {\n                  // Insert an empty string to continue writing non-annotated text\n                  Editor.withoutNormalizing(editor, () => {\n                    if (editor.selection) {\n                      Transforms.insertNodes(\n                        editor,\n                        [{_type: 'span', text: '', marks: [], _key: keyGenerator()}],\n                        {\n                          at: Range.end(editor.selection),\n                        }\n                      )\n                      editor.onChange()\n                    }\n                  })\n                  return {\n                    spanPath: newSelection.focus.path,\n                    markDefPath: [{_key: block._key}, 'markDefs', {_key: annotationKey}],\n                  }\n                }\n              }\n            }\n          }\n        }\n        return undefined\n      },\n      delete: (selection: EditorSelection, options?: EditableAPIDeleteOptions): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            const nodes = Editor.nodes(editor, {\n              at: range,\n              match: (node) => {\n                if (options?.mode === 'blocks') {\n                  debug(`Deleting blocks touched by selection`)\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                }\n                debug(`Deleting children touched by selection`)\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n            const nodeAndPaths = [...nodes]\n            nodeAndPaths.forEach(([, p]) => {\n              Transforms.removeNodes(editor, {\n                at: p,\n                voids: true,\n                hanging: true,\n              })\n            })\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: (type: ObjectSchemaType): void => {\n        let {selection} = editor\n        debug('Removing annotation', type)\n        if (selection) {\n          // Select the whole annotation if collapsed\n          if (Range.isCollapsed(selection)) {\n            const [node, nodePath] = Editor.node(editor, selection, {depth: 2})\n            if (Text.isText(node) && node.marks && typeof node.text === 'string') {\n              Transforms.select(editor, nodePath)\n              selection = editor.selection\n            }\n          }\n          // Do this without normalization or span references will be unstable!\n          Editor.withoutNormalizing(editor, () => {\n            if (selection && Range.isExpanded(selection)) {\n              selection = editor.selection\n              if (!selection) {\n                return\n              }\n              // Split the span first\n              Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n              editor.onChange()\n\n              // Everything in the selection which has marks\n              const spans = [\n                ...Editor.nodes(editor, {\n                  at: selection,\n                  match: (node) =>\n                    Text.isText(node) &&\n                    node.marks !== undefined &&\n                    Array.isArray(node.marks) &&\n                    node.marks.length > 0,\n                }),\n              ]\n              spans.forEach(([span, path]) => {\n                const [block] = Editor.node(editor, path, {depth: 1})\n                if (editor.isTextBlock(block)) {\n                  block.markDefs\n                    ?.filter((def) => def._type === type.name)\n                    .forEach((def) => {\n                      if (\n                        Text.isText(span) &&\n                        Array.isArray(span.marks) &&\n                        span.marks.includes(def._key)\n                      ) {\n                        const newMarks = [...(span.marks || []).filter((mark) => mark !== def._key)]\n                        Transforms.setNodes(\n                          editor,\n                          {\n                            marks: newMarks,\n                          },\n                          {at: path, voids: false, split: false}\n                        )\n                      }\n                    })\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n          editor.onChange()\n        }\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n      insertBreak: () => {\n        editor.insertBreak()\n        editor.onChange()\n      },\n    })\n    return editor\n  }\n}\n","import {PortableTextSlateEditor} from '../../types/editor'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(maxBlocks: number) {\n  return function withMaxBlocks(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      const rows = maxBlocks\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' || operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PRESERVE_KEYS: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withPreserveKeys(editor: Editor, fn: () => void): void {\n  PRESERVE_KEYS.set(editor, true)\n  fn()\n  PRESERVE_KEYS.set(editor, false)\n}\n\nexport function isPreservingKeys(editor: Editor): boolean | undefined {\n  return PRESERVE_KEYS.get(editor)\n}\n","import {Element, Transforms, Node, Editor} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {isPreservingKeys, PRESERVE_KEYS} from '../../utils/withPreserveKeys'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withKeys(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    PRESERVE_KEYS.set(editor, false)\n    const {apply, normalizeNode} = editor\n    editor.apply = (operation) => {\n      if (operation.type === 'split_node') {\n        operation.properties = {\n          ...operation.properties,\n          _key: keyGenerator(),\n        }\n      }\n      if (operation.type === 'insert_node') {\n        // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!\n        const withNewKey = !isPreservingKeys(editor) || !('_key' in operation.node)\n        if (!Editor.isEditor(operation.node)) {\n          operation.node = {\n            ...operation.node,\n            ...(withNewKey ? {_key: keyGenerator()} : {}),\n          }\n        }\n      }\n      apply(operation)\n    }\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          Transforms.setNodes(editor, {_key: keyGenerator()}, {at: path})\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            Transforms.setNodes(editor, {_key: keyGenerator()}, {at: childPath})\n            return\n          }\n        }\n      }\n      // Do the original `normalizeNode` to enforce other constraints.\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","export const BEFORE = 'before'\nexport const AFTER = 'after'\n\nexport default function insert(array: any[], position: string, index: number, ...args: any[]) {\n  if (position !== BEFORE && position !== AFTER) {\n    throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`)\n  }\n\n  const items = flatten(...args)\n\n  if (array.length === 0) {\n    return items\n  }\n\n  const len = array.length\n  const idx = Math.abs((len + index) % len) % len\n\n  const normalizedIdx = position === 'after' ? idx + 1 : idx\n\n  const copy = array.slice()\n  copy.splice(normalizedIdx, 0, ...flatten(items))\n  return copy\n}\n\nfunction flatten(...values: any[]) {\n  return values.reduce((prev, item) => prev.concat(item), [])\n}\n","import {PathSegment} from '@sanity/types'\nimport {findIndex} from 'lodash'\nimport applyPatch from './applyPatch'\nimport insert from './arrayInsert'\n\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty)\n\nfunction move(arr: any[], from: number, to: any) {\n  const nextValue = arr.slice()\n  const val = nextValue[from]\n  nextValue.splice(from, 1)\n  nextValue.splice(to, 0, val)\n  return nextValue\n}\n\nfunction findTargetIndex(array: any[], pathSegment: PathSegment) {\n  if (typeof pathSegment === 'number') {\n    return pathSegment\n  }\n  const index = findIndex(array, pathSegment)\n  return index === -1 ? false : index\n}\n\nexport default function apply(\n  value: any,\n  patch: {type: any; path: any; value: any; position: any; items: any}\n) {\n  const nextValue = value.slice() // make a copy for internal mutation\n\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'setIfMissing') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return value === undefined ? patch.value : value\n    } else if (patch.type === 'set') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'move') {\n      if (!patch.value || !hasOwn(patch.value, 'from') || !hasOwn(patch.value, 'to')) {\n        // eslint-disable-line max-depth\n        throw new Error(\n          `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n            patch.value\n          )}`\n        )\n      }\n      return move(nextValue, patch.value.from, patch.value.to)\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`)\n  }\n\n  const [head, ...tail] = patch.path\n\n  const index = findTargetIndex(value, head)\n\n  // If the given selector could not be found, return as-is\n  if (index === false) {\n    return nextValue\n  }\n\n  if (tail.length === 0) {\n    if (patch.type === 'insert') {\n      const {position, items} = patch\n      return insert(value, position, index, items)\n    } else if (patch.type === 'unset') {\n      if (typeof index !== 'number') {\n        throw new Error(`Expected array index to be a number, instead got \"${index}\"`)\n      }\n      nextValue.splice(index, 1)\n      return nextValue\n    }\n  }\n\n  // The patch is not directed to me\n  nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","import {omit, clone, isObject} from 'lodash'\nimport applyPatch from './applyPatch'\n\nexport default function apply(value: any, patch: {type: any; path: any; value: any}) {\n  const nextValue = clone(value)\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'set') {\n      if (!isObject(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an object to a non-object')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'setIfMissing') {\n      // console.log('IS IT missing?', value)\n      return value === undefined ? patch.value : value\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`)\n  }\n\n  // The patch is not directed to me\n  const [head, ...tail] = patch.path\n  if (typeof head !== 'string') {\n    throw new Error(`Expected field name to be a string, instad got: ${head}`)\n  }\n\n  if (tail.length === 0 && patch.type === 'unset') {\n    return omit(nextValue, head)\n  }\n\n  nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","const OPERATIONS: Record<string, any> = {\n  replace(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: any, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(_currentValue: any, _nextValue: any) {\n    return undefined\n  },\n  inc(currentValue: any, nextValue: any) {\n    return currentValue + nextValue\n  },\n  dec(currentValue: any, nextValue: any) {\n    return currentValue - nextValue\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(value: any, patch: any) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path\n        .map((path: any) => JSON.stringify(path))\n        .join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  return OPERATIONS[patch.type](value, patch.value)\n}\n","import * as DMP from 'diff-match-patch'\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\ntype fn = (oldVal: any, newVal: any) => any\nconst OPERATIONS: Record<string, fn> = {\n  replace(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: undefined, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(currentValue: any, nextValue: any) {\n    return undefined\n  },\n  diffMatchPatch(currentValue: string, nextValue: string) {\n    return dmp.patch_apply(dmp.patch_fromText(nextValue), currentValue)[0]\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(\n  value: string,\n  patch: {type: string; path: any[]; value: any}\n): string {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path.join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  const func = OPERATIONS[patch.type]\n  if (func) {\n    return func(value, patch.value)\n  }\n  throw new Error('Unknown patch type')\n}\n","import {isObject, isString} from 'lodash'\nimport applyArrayPatch from './array'\nimport applyObjectPatch from './object'\nimport applyPrimitivePatch from './primitive'\nimport applyStringPatch from './string'\n\nexport function applyAll(value: any, patches: any[]) {\n  return patches.reduce(_apply, value)\n}\n\nfunction applyPatch(value: string, patch: {type: string; path: any[]; value: any}) {\n  if (Array.isArray(value)) {\n    return applyArrayPatch(value, patch as any)\n  }\n  if (isString(value)) {\n    return applyStringPatch(value, patch)\n  }\n  if (isObject(value)) {\n    return applyObjectPatch(value, patch)\n  }\n  return applyPrimitivePatch(value, patch)\n}\n\nexport default function _apply(value: string, patch: {type: string; path: any[]; value: any}) {\n  const res = applyPatch(value, patch)\n  // console.log('applyPatch(%o, %o) : %o (noop? %o)', value, patch, res, value === res)\n  return res\n}\n","/* eslint-disable max-statements */\nimport {Editor, Transforms, Element, Path as SlatePath, Descendant, Text, Node} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport {Path, KeyedSegment, PathSegment, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {Patch, InsertPatch, UnsetPatch, SetPatch, DiffMatchPatch} from '../types/patch'\nimport {applyAll} from '../patch/applyPatch'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {toSlateValue} from './values'\nimport {debugWithName} from './debug'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('patchToOperations')\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function createPatchToOperations(\n  schemaTypes: PortableTextMemberSchemaTypes\n): (\n  editor: Editor,\n  patch: Patch,\n  patches: Patch[],\n  snapshot: PortableTextBlock[] | undefined\n) => boolean {\n  function diffMatchPatch(editor: Editor, patch: DiffMatchPatch) {\n    const blockKey = findLastKey([patch.path[0]])\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return blockKey ? node._key === blockKey : indx === patch.path[0]\n    })\n    const block = editor.children[blockIndex] as Element | undefined\n    const parsed = dmp.patch_fromText(patch.value)[0]\n    const isSpanTextDiffMatchPatch =\n      editor.isTextBlock(block) &&\n      patch.path[1] === 'children' &&\n      patch.path.length === 4 &&\n      patch.path[3] === 'text'\n    if (parsed && isSpanTextDiffMatchPatch) {\n      const distance = parsed.length2 - parsed.length1\n      let text\n      if (parsed.diffs[1]) {\n        text = parsed.diffs[1][1]\n      } else {\n        text = parsed.diffs[0][1]\n      }\n      if (patch.path[1] === 'children') {\n        const childKey = findLastKey([patch.path[2]])\n        const childIndex = block.children.findIndex((node, indx) => {\n          return childKey ? node._key === childKey : indx === patch.path[0]\n        })\n        const slatePath = [blockIndex]\n        if (childIndex > -1) {\n          slatePath.push(childIndex)\n        }\n        const point = {\n          path: slatePath,\n          offset:\n            distance >= 0\n              ? (parsed.start1 || 0) + parsed.diffs[0][1].length\n              : (parsed.start2 || 0) + parsed.length2 - distance,\n        }\n        // debug(\n        //   `DiffMatchPatch (${distance < 0 ? 'remove' : 'insert'}) at ${JSON.stringify(slatePath)}}: `,\n        //   JSON.stringify(point, null, 2),\n        //   JSON.stringify(parsed, null, 2)\n        // )\n        debugState(editor, 'before')\n\n        if (distance >= 0) {\n          editor.apply({\n            type: 'insert_text',\n            path: point.path,\n            offset: point.offset,\n            text,\n          })\n        } else {\n          editor.apply({\n            type: 'remove_text',\n            path: point.path,\n            offset: point.offset - text.length,\n            text,\n          })\n        }\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    return false\n  }\n\n  function insertPatch(editor: Editor, patch: InsertPatch) {\n    // Insert blocks\n    if (patch.path.length === 1) {\n      const {items, position} = patch\n      const blocksToInsert = toSlateValue(\n        items as PortableTextBlock[],\n        {schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      ) as Descendant[]\n      const posKey = findLastKey(patch.path)\n      const index = Math.max(\n        0,\n        editor.children.findIndex((node, indx) => {\n          return posKey ? node._key === posKey : indx === patch.path[0]\n        })\n      )\n      const normalizedIdx = position === 'after' ? index + 1 : index\n      debug(`Inserting blocks at path [${normalizedIdx}]`)\n      debugState(editor, 'before')\n      Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n      debugState(editor, 'after')\n      return true\n    }\n    const {items, position} = patch\n    const posKey = findLastKey(patch.path)\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return posKey ? node._key === posKey : indx === patch.path[0]\n    })\n\n    // Insert children\n    const block: Descendant | undefined =\n      editor.children && blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex = editor.isTextBlock(block)\n      ? block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      : 0\n    const childrenToInsert =\n      block &&\n      toSlateValue(\n        [{...block, children: items as PortableTextChild[]}],\n        {schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      )\n\n    const normalizedIdx = position === 'after' ? childIndex + 1 : childIndex\n    const targetPath = [blockIndex, normalizedIdx]\n    debug(`Inserting children at path ${targetPath}`)\n    debugState(editor, 'before')\n    if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n      Transforms.insertNodes(editor, childrenToInsert[0].children, {at: targetPath})\n    }\n    debugState(editor, 'after')\n    return true\n  }\n\n  function setPatch(editor: Editor, patch: SetPatch) {\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n    debug('blockIndex', blockIndex)\n    const block = blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex = editor.isTextBlock(block)\n      ? block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      : 0\n    let value = patch.value\n    const targetPath: SlatePath = childIndex > -1 ? [blockIndex, childIndex] : [blockIndex]\n    if (typeof patch.path[3] === 'string') {\n      value = {}\n      value[patch.path[3]] = patch.value\n    }\n    const isTextBlock = editor.isTextBlock(block)\n    if (isTextBlock) {\n      debug(`Setting nodes at ${JSON.stringify(patch.path)} - ${JSON.stringify(targetPath)}`)\n      debug('Value to set', JSON.stringify(value, null, 2))\n      debugState(editor, 'before')\n      if (targetPath.length === 1) {\n        debug('Setting block property')\n        const {children, ...nextRest} = value as PortableTextBlock\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {children: prevChildren, ...prevRest} = block || {children: undefined}\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {...prevRest},\n          newProperties: nextRest,\n        })\n        if (block && Element.isElement(block)) {\n          block.children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'remove_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n        if (Array.isArray(children)) {\n          children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'insert_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n      } else if (Text.isText(value)) {\n        debug('Setting text property')\n        const prevSel = editor.selection && {...editor.selection}\n        editor.apply({\n          type: 'remove_text',\n          path: targetPath,\n          offset: 0,\n          text: block.children[childIndex].text as string,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: targetPath,\n          offset: 0,\n          text: value.text,\n        })\n        const onSamePath = prevSel && isEqual(prevSel.focus.path, targetPath)\n        // const onSameText =\n        //   editor.selection &&\n        //   editor.selection.focus.path[0] === blockIndex &&\n        //   patch.path[3] === 'text'\n        if (onSamePath) {\n          debug('On same path, restoring previous selection')\n          Transforms.select(editor, prevSel)\n        }\n        //  else if (onSameText) {\n        //   debug('Adjusting for inserted text')\n        //   const newOffset = typeof patch.value === 'string' ? patch.value.length : 0\n        //   const point = {path: targetPath, offset: newOffset}\n        //   Transforms.select(editor, {focus: point, anchor: point})\n        // }\n      } else {\n        debug('Setting non-text property')\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {},\n          newProperties: value as Partial<Node>,\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    // If this is a object block, just set the whole block\n    else if (block && 'value' in block) {\n      const newVal = applyAll([block.value], [patch])[0]\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  function unsetPatch(editor: Editor, patch: UnsetPatch, previousPatch?: Patch) {\n    // Value\n    if (patch.path.length === 0) {\n      debug(`Removing everything`)\n      debugState(editor, 'before')\n      Transforms.deselect(editor)\n      editor.children.forEach((c, i) => {\n        Transforms.removeNodes(editor, {at: [i]})\n      })\n      debugState(editor, 'after')\n      return true\n    }\n    // Single blocks\n    if (patch.path.length === 1) {\n      const lastKey = findLastKey(patch.path)\n      const index = editor.children.findIndex((node, indx) =>\n        lastKey ? node._key === lastKey : indx === patch.path[0]\n      )\n      if (index === -1) {\n        debug(`Could not find block to unset at path ${JSON.stringify(patch.path)}`)\n        return false\n      }\n      debug(`Removing block at path [${index}]`)\n      debugState(editor, 'before')\n      if (\n        editor.selection &&\n        editor.selection.focus.path[0] === index &&\n        editor.children[index - 1]\n      ) {\n        const point = {path: [Math.max(editor.selection.focus.path[0] - 1, 0)], offset: 0}\n        Transforms.select(editor, {focus: point, anchor: point})\n        Transforms.move(editor, {unit: 'line'})\n      }\n      Transforms.removeNodes(editor, {at: [index]})\n      debugState(editor, 'after')\n      return true\n    }\n\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n\n    const block = blockIndex > -1 ? editor.children[blockIndex] : undefined\n\n    // Unset on text block children\n    if (editor.isTextBlock(block) && patch.path[1] === 'children' && patch.path.length === 3) {\n      const childIndex = block.children.findIndex((node: PortableTextChild, indx: number) => {\n        return isKeyedSegment(patch.path[2])\n          ? node._key === patch.path[2]._key\n          : indx === patch.path[2]\n      })\n      const targetPath = [blockIndex, childIndex]\n      const prevSel = editor.selection && {...editor.selection}\n      const onSamePath = isEqual(editor.selection?.focus.path, targetPath)\n      if (childIndex === -1) {\n        debug(`Could not find child to unset at path ${JSON.stringify(targetPath)}`)\n        return false\n      }\n      debug(`Unsetting child at path ${JSON.stringify(targetPath)}`)\n      debugState(editor, 'before')\n      if (prevSel && onSamePath && editor.isTextBlock(block)) {\n        const needToAdjust = childIndex >= prevSel.focus.path[1]\n        if (needToAdjust) {\n          const textChild = block.children[childIndex]\n          const isMergeUnset =\n            previousPatch?.type === 'set' &&\n            previousPatch.path[3] === 'text' &&\n            typeof previousPatch.value === 'string' &&\n            editor.isTextSpan(textChild) &&\n            isEqual(\n              previousPatch.value.slice(-textChild.text.length),\n              block.children[childIndex].text\n            )\n          if (isMergeUnset) {\n            const mergedChild = block.children[Math.max(childIndex - 1, 0)]\n            debug('Adjusting selection for merging of nodes')\n            prevSel.focus = {...prevSel.focus}\n            prevSel.focus.path = [targetPath[0], Math.max(targetPath[1] - 1, 0)]\n            prevSel.focus.offset = editor.isTextSpan(mergedChild)\n              ? mergedChild.text.length - textChild.text.length + prevSel.focus.offset\n              : 0\n            prevSel.anchor = prevSel.focus\n            Transforms.select(editor, prevSel)\n            Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n            debugState(editor, 'after')\n            return true\n          }\n        }\n      }\n      Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n      debugState(editor, 'after')\n      return true\n    }\n    // Inside block objects - patch block and set it again\n    if (!editor.isTextBlock(block)) {\n      const newBlock = applyAll([block], [patch])[0]\n      Transforms.setNodes(editor, newBlock, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  let previousPatch: Patch | undefined\n\n  return function (editor: Editor, patch: Patch): boolean {\n    let changed = false\n    debug('\\n\\nNEW PATCH =============================================================')\n    debug(JSON.stringify(patch, null, 2))\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch, previousPatch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n    previousPatch = patch\n    return changed\n  }\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\n// Helper function to find the last part of a patch path that has a known key\nfunction findLastKey(path: Path): string | null {\n  let key: string | null = null\n\n  path\n    .concat('')\n    .reverse()\n    .forEach((part) => {\n      if (isKeyedSegment(part)) {\n        key = part._key\n      }\n    })\n\n  return key\n}\n\nfunction debugState(editor: Editor, stateName: string) {\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n","import {EMPTY, Observable, OperatorFunction, defer, of, switchMap, tap} from 'rxjs'\n\nexport function bufferUntil<T>(\n  emitWhen: (currentBuffer: T[]) => boolean\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) =>\n    defer(() => {\n      let buffer: T[] = [] // custom buffer\n      return source.pipe(\n        tap((v) => buffer.push(v)), // add values to buffer\n        switchMap(() => (emitWhen(buffer) ? of(buffer) : EMPTY)), // emit the buffer when the condition is met\n        tap(() => (buffer = [])) // clear the buffer\n      )\n    })\n}\n","/* eslint-disable complexity */\n/* eslint-disable no-eq-null */\n/* eslint-disable max-depth */\n/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport {isEqual, flatten} from 'lodash'\nimport {\n  Editor,\n  Element as SlateElement,\n  Operation,\n  Path,\n  SplitNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SelectionOperation,\n} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport type {Patch} from '../../types/patch'\nimport {PatchObservable, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {isPatching} from '../../utils/withoutPatching'\n\nconst debug = debugWithName('plugin:withUndoRedo')\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst MERGING = new WeakMap<Editor, boolean | undefined>()\nconst UNDO_STEP_LIMIT = 300\n\nconst isMerging = (editor: Editor): boolean | undefined => {\n  return MERGING.get(editor)\n}\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  if (!isPatching(editor)) {\n    return false\n  }\n  return SAVING.get(editor)\n}\n\nexport interface Options {\n  patches$?: PatchObservable\n  readOnly: boolean\n}\n\nexport function createWithUndoRedo(\n  options: Options\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {readOnly, patches$} = options\n  const remotePatches: {patch: Patch; time: Date}[] = []\n  return (editor: PortableTextSlateEditor) => {\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches')\n        const sub = patches$.subscribe(({patches}) => {\n          patches.forEach((patch) => {\n            if (patch.origin !== 'local') {\n              remotePatches.push({patch: patch, time: new Date()})\n            }\n          })\n        })\n        return () => {\n          debug('Unsubscribing to patches')\n          sub.unsubscribe()\n        }\n      })\n    }\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    // Apply function for merging and saving local history inspired from 'slate-history' by Ian Storm Taylor\n    editor.apply = (op: Operation) => {\n      if (readOnly) {\n        apply(op)\n        return\n      }\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp = step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      let save = isSaving(editor)\n      let merge = isMerging(editor)\n\n      if (save == null) {\n        save = shouldSave(op, lastOp)\n      }\n\n      if (save) {\n        if (merge == null) {\n          if (step == null) {\n            merge = false\n            // eslint-disable-next-line no-negated-condition\n          } else if (operations.length !== 0) {\n            merge = true\n          } else {\n            merge = shouldMerge(op, lastOp) || overwrite\n          }\n        }\n\n        if (step && merge) {\n          if (overwrite) {\n            step.operations.pop()\n          }\n          step.operations.push(op)\n        } else {\n          const stp = {\n            operations: [...(editor.selection === null ? [] : [createSelectOperation(editor)]), op],\n            timestamp: new Date(),\n          }\n          undos.push(stp)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = [...remotePatches.filter((item) => item.time >= step.timestamp)]\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n            )\n          })\n          withoutSaving(editor, () => {\n            Editor.withoutNormalizing(editor, () => {\n              transformedOperations\n                .map(Operation.inverse)\n                .reverse()\n                .forEach((op) => {\n                  // Try this as the document could be changed from the outside,\n                  // and sometimes we can't perform the undo operation on the current doc.\n                  try {\n                    editor.apply(op)\n                  } catch (err) {\n                    debug('Could not perform undo step', err)\n                    editor.history.redos.push(step)\n                    editor.history.undos.pop()\n                  }\n                })\n            })\n          })\n        }\n        editor.history.redos.push(step)\n        editor.history.undos.pop()\n        editor.onChange()\n      }\n    }\n\n    editor.redo = () => {\n      if (readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time > step.timestamp)\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n            )\n          })\n          withoutSaving(editor, () => {\n            Editor.withoutNormalizing(editor, () => {\n              transformedOperations.forEach((op) => {\n                try {\n                  editor.apply(op)\n                } catch (err) {\n                  debug('Could not perform redo step', err)\n                  editor.history.undos.push(step)\n                  editor.history.redos.pop()\n                }\n              })\n            })\n          })\n        }\n        editor.history.undos.push(step)\n        editor.history.redos.pop()\n        editor.onChange()\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n// This will adjust the user selection according to patcehes done by others.\n// TODO: complete all necessary steps of the algorithm and write tests.\n\n// eslint-disable-next-line max-statements\nfunction transformOperation(editor: Editor, patch: Patch, operation: Operation): Operation[] {\n  // debug(`Rebasing selection for patch ${patch.type} against operation ${operation.type}`)\n\n  let transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, patch.items.length)]\n  }\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, -1)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(`Adjusting selection for unset everything patch and ${operation.type} operation`)\n    return [operation]\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const blockIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n    const block = editor.children[blockIndex]\n    if (SlateElement.isElement(block) && Array.isArray(block.children)) {\n      const childIndex = block.children.findIndex((child) =>\n        isEqual({_key: child._key}, patch.path[2])\n      )\n      const parsed = dmp.patch_fromText(patch.value)[0]\n      if (!parsed) {\n        debug('Could not parse diffMatchPatch', patch)\n        return [operation]\n      }\n      const distance = parsed.length2 - parsed.length1\n      const patchIsRemovingText = parsed.diffs.some((diff) => diff[0] === -1)\n\n      if (operation.type === 'split_node' && operation.path.length > 1) {\n        const splitOperation = transformedOperation as SplitNodeOperation\n        if (patchIsRemovingText) {\n          splitOperation.position -= distance\n        } else {\n          splitOperation.position += distance\n        }\n        return [splitOperation]\n      }\n\n      if (\n        (operation.type === 'insert_text' || operation.type === 'remove_text') &&\n        Path.isPath(operation.path) &&\n        operation.path[0] !== undefined &&\n        operation.path[0] === blockIndex &&\n        operation.path[1] === childIndex\n      ) {\n        if (operation.type === 'insert_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === 1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const insertTextOperation = transformedOperation as InsertTextOperation\n            insertTextOperation.offset += distance\n            transformedOperation = insertTextOperation\n          }\n          // TODO: deal with overlapping ranges\n          return [transformedOperation]\n        }\n\n        if (operation.type === 'remove_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === -1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const removeTextOperation = transformedOperation as RemoveTextOperation\n            removeTextOperation.offset -= distance\n            transformedOperation = removeTextOperation\n          }\n          return [transformedOperation]\n        }\n      }\n      // // Selection operations with diffPatchMatch\n      // if (operation.type === 'set_selection') {\n      //   const newProperties = transformedOperation.newProperties\n      //   if (newProperties && patchIsRemovingText) {\n      //     newProperties.offset = newProperties.offset - distance\n      //   } else if (newProperties) {\n      //     newProperties.offset = newProperties.offset + distance\n      //   }\n      //   return [newProperties ? {...transformedOperation, newProperties} : transformedOperation]\n      // }\n    }\n    // TODO: transform this?\n    // if (operation.type === 'set_selection' && patch.type !== 'diffMatchPatch') {\n    //   console.log('set_selection other', JSON.stringify(patch))\n    // }\n  }\n  return [operation]\n}\n\nfunction adjustBlockPath(\n  editor: Editor,\n  patch: Patch,\n  operation: Operation,\n  level: number\n): Operation {\n  const myIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n  if (\n    myIndex >= 0 &&\n    operation.type !== 'set_selection' &&\n    Array.isArray(operation.path) &&\n    operation.path[0] !== undefined &&\n    operation.path[0] >= myIndex + level\n  ) {\n    const transformedOperation = {...operation}\n    const newPath = [operation.path[0] + level, ...operation.path.slice(1)]\n    debug(`Adjusting ${operation.type} for block ${patch.type}`, operation.path, newPath)\n    transformedOperation.path = newPath\n    return transformedOperation\n  }\n  return operation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection' && op.newProperties === null) {\n    return false\n  }\n\n  return true\n}\n\nconst shouldOverwrite = (op: Operation, prev: Operation | undefined): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n","/* eslint-disable max-nested-callbacks */\nimport {Subject, concatMap, tap} from 'rxjs'\nimport {\n  Descendant,\n  Editor,\n  InsertNodeOperation,\n  InsertTextOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  SplitNodeOperation,\n} from 'slate'\nimport {insert, setIfMissing, unset} from '../../patch/PatchEvent'\nimport type {Patch} from '../../types/patch'\n\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  EditorChange,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {PATCHING, isPatching, withoutPatching} from '../../utils/withoutPatching'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {createPatchToOperations} from '../../utils/patchToOperations'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {bufferUntil} from '../../utils/bufferUntil'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n}\n\ninterface Options {\n  change$: Subject<EditorChange>\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  patches$?: PatchObservable\n  patchFunctions: PatchFunctions\n  readOnly: boolean\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\nexport function createWithPatches({\n  change$,\n  isPending,\n  patches$,\n  patchFunctions,\n  readOnly,\n  schemaTypes,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const patchToOperations = createPatchToOperations(schemaTypes)\n  return function withPatches(editor: PortableTextSlateEditor) {\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches$')\n        const sub = patches$\n          .pipe(\n            tap(({patches}) => {\n              if (patches.every((p) => p.origin === 'local')) {\n                isPending.current = false\n              }\n            }),\n            bufferUntil(() => !isPending.current),\n            concatMap((incoming) => {\n              return incoming\n            })\n          )\n          .subscribe(({patches, snapshot}) => {\n            const remotePatches = patches.filter((p) => p.origin !== 'local')\n            if (remotePatches.length !== 0) {\n              debug('Remote patches', patches)\n              Editor.withoutNormalizing(editor, () => {\n                remotePatches.forEach((patch) => {\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                  withoutPatching(editor, () => {\n                    withoutSaving(editor, () => {\n                      withPreserveKeys(editor, () => {\n                        try {\n                          patchToOperations(editor, patch, patches, snapshot)\n                        } catch (err) {\n                          debug('Got error trying to create operations from patch')\n                          console.error(err)\n                        }\n                      })\n                    })\n                  })\n                })\n              })\n            }\n          })\n        return () => {\n          debug('Unsubscribing to patches$')\n          sub.unsubscribe()\n        }\n      })\n    }\n    editor.apply = (operation: Operation): void | Editor => {\n      if (readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        debug(`Editor is not producing patch for operation ${operation.type}`, operation)\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (editorWasEmpty && !editorIsEmpty && operation.type !== 'set_selection') {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_selection':\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['set_node', 'remove_text', 'remove_node'].includes(operation.type)\n      ) {\n        patches = [...patches, unset([])]\n        change$.next({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor)\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          change$.next({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Descendant} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock({\n  schemaTypes,\n  keyGenerator,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.createPlaceholderBlock = (): Descendant => {\n      debug('Creating placeholder block')\n      return {\n        _type: schemaTypes.block.name,\n        _key: keyGenerator(),\n        style: schemaTypes.styles[0].value || 'normal',\n        markDefs: [],\n        children: [\n          {\n            _type: 'span',\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          },\n        ],\n      }\n    }\n    return editor\n  }\n}\n","import {Subject} from 'rxjs'\nimport {Editor, Transforms, Element, Path, Text as SlateText, Node} from 'slate'\nimport {\n  EditorChange,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {fromSlateValue} from '../../utils/values'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  types: PortableTextMemberSchemaTypes,\n  change$: Subject<EditorChange>\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      const [, path] = nodeEntry\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            Transforms.setNodes(editor, {style: defaultStyle}, {at: [op.path[0] + 1], voids: false})\n            break\n          }\n        }\n      }\n    }\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(editor, {...node, style: defaultStyle} as Partial<Node>, {\n            at: path,\n          })\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path}\n          )\n        }\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Transforms, Element, Text, Node} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(types: PortableTextMemberSchemaTypes) {\n  return function withPortableTextLists(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path}\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path}\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          } else {\n            level++\n            debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path}\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isListBlock(node) && node.listItem === listStyle,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","/* eslint-disable complexity */\n/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isEqual, flatten, uniq} from 'lodash'\nimport {Editor, Range, Transforms, Text, Path, NodeEntry, Element} from 'slate'\n\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  types: PortableTextMemberSchemaTypes\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      if (\n        editor.operations.some((op) =>\n          [\n            'insert_node',\n            'insert_text',\n            'merge_node',\n            'remove_node',\n            'remove_text',\n            'set_node',\n          ].includes(op.type)\n        )\n      ) {\n        mergeSpans(editor)\n      }\n      const [node, path] = nodeEntry\n      const isSpan = Text.isText(node) && node._type === types.span.name\n      const isTextBlock = editor.isTextBlock(node)\n      if (isSpan || isTextBlock) {\n        if (isSpan && !Array.isArray(node.marks)) {\n          debug('Adding .marks to span node')\n          Transforms.setNodes(editor, {marks: []}, {at: path})\n          editor.onChange()\n        }\n        for (const op of editor.operations) {\n          // Make sure markDefs are copied over when merging two blocks.\n          if (\n            op.type === 'merge_node' &&\n            op.path.length === 1 &&\n            'markDefs' in op.properties &&\n            op.properties._type === types.block.name &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] - 1 >= 0\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n            debug(`Copying markDefs over to merged block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n              const isNormalized = isEqual(newMarkDefs, targetBlock.markDefs)\n              // eslint-disable-next-line max-depth\n              if (!isNormalized) {\n                Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: targetPath, voids: false})\n                editor.onChange()\n              }\n            }\n          }\n          // Make sure markDefs are copied over to new block when splitting a block.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            Element.isElementProps(op.properties) &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] + 1])\n            debug(`Copying markDefs over to split block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              Transforms.setNodes(\n                editor,\n                {markDefs: uniq([...oldDefs, ...op.properties.markDefs])},\n                {at: targetPath, voids: false}\n              )\n              editor.onChange()\n            }\n          }\n          // Make sure marks are reset, if a block is split at the end.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 2 &&\n            op.properties._type === types.span.name &&\n            'marks' in op.properties &&\n            Array.isArray(op.properties.marks) &&\n            op.properties.marks.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [child, childPath] = Editor.node(editor, [op.path[0] + 1, 0])\n            if (\n              Text.isText(child) &&\n              child.text === '' &&\n              Array.isArray(child.marks) &&\n              child.marks.length > 0\n            ) {\n              Transforms.setNodes(editor, {marks: []}, {at: childPath, voids: false})\n              editor.onChange()\n            }\n          }\n          // Make sure markDefs are reset, if a block is split at start.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0\n          ) {\n            const [block, blockPath] = Editor.node(editor, [op.path[0]])\n            if (\n              editor.isTextBlock(block) &&\n              block.children.length === 1 &&\n              block.markDefs &&\n              block.markDefs.length > 0 &&\n              Text.isText(block.children[0]) &&\n              block.children[0].text === '' &&\n              (!block.children[0].marks || block.children[0].marks.length === 0)\n            ) {\n              Transforms.setNodes(editor, {markDefs: []}, {at: blockPath})\n              editor.onChange()\n            }\n          }\n        }\n        // Empty marks if text is empty\n        if (isSpan && Array.isArray(node.marks) && node.marks.length > 0 && node.text === '') {\n          Transforms.setNodes(editor, {marks: []}, {at: path, voids: false})\n          editor.onChange()\n        }\n      }\n      // Check consistency of markDefs\n      if (\n        isTextBlock &&\n        editor.operations.some((op) =>\n          ['split_node', 'remove_node', 'remove_text', 'merge_node'].includes(op.type)\n        )\n      ) {\n        normalizeMarkDefs(editor)\n      }\n    }\n\n    // Special hook before inserting text at the end of an annotation.\n    editor.apply = (op) => {\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        if (\n          selection &&\n          Range.isCollapsed(selection) &&\n          Editor.marks(editor)?.marks?.some((mark) => !decorators.includes(mark))\n        ) {\n          const [node] = Array.from(\n            Editor.nodes(editor, {\n              mode: 'lowest',\n              at: selection.focus,\n              match: (n) => n._type === types.span.name,\n              voids: false,\n            })\n          )[0] || [undefined]\n          if (\n            Text.isText(node) &&\n            node.text.length === selection.focus.offset &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0\n          ) {\n            apply(op)\n            Transforms.splitNodes(editor, {\n              match: Text.isText,\n              at: {...selection.focus, offset: selection.focus.offset},\n            })\n            const marksWithoutAnnotationMarks: string[] = (\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            ).filter((mark) => decorators.includes(mark))\n            Transforms.setNodes(\n              editor,\n              {marks: marksWithoutAnnotationMarks},\n              {at: Path.next(selection.focus.path)}\n            )\n            return\n          }\n        }\n      }\n      apply(op)\n    }\n\n    // Override built in addMark function\n    editor.addMark = (mark: string) => {\n      if (editor.selection) {\n        if (Range.isExpanded(editor.selection)) {\n          // Split if needed\n          Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n          // Use new selection\n          const splitTextNodes = [\n            ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n          ]\n          const shouldRemoveMark = flatten(\n            splitTextNodes.map((item) => item[0]).map((node) => node.marks)\n          ).includes(mark)\n          if (shouldRemoveMark) {\n            editor.removeMark(mark)\n            return\n          }\n          Editor.withoutNormalizing(editor, () => {\n            splitTextNodes.forEach(([node, path]) => {\n              const marks = [\n                ...(Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark\n                ),\n                mark,\n              ]\n              Transforms.setNodes(\n                editor,\n                {marks},\n                {at: path, match: Text.isText, split: true, hanging: true}\n              )\n            })\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: [...existingMarks, mark],\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    // Override built in removeMark function\n    editor.removeMark = (mark: string) => {\n      const {selection} = editor\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n            if (editor.selection) {\n              const splitTextNodes = [\n                ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n              ]\n              splitTextNodes.forEach(([node, path]) => {\n                const block = editor.children[path[0]]\n                if (Element.isElement(block) && block.children.includes(node)) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                        (eMark: string) => eMark !== mark\n                      ),\n                    },\n                    {at: path}\n                  )\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: existingMarks.filter((eMark) => eMark !== mark),\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    editor.pteIsMarkActive = (mark: string): boolean => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return false\n      }\n      let existingMarks =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      if (Range.isExpanded(editor.selection)) {\n        Array.from(Editor.nodes(editor, {match: Text.isText, at: editor.selection})).forEach(\n          (n) => {\n            const [node] = n as NodeEntry<Text>\n            existingMarks = uniq([...existingMarks, ...((node.marks as string[]) || [])])\n          }\n        )\n      }\n      return existingMarks.includes(mark)\n    }\n\n    // Custom editor function to toggle a mark\n    editor.pteToggleMark = (mark: string) => {\n      const isActive = editor.pteIsMarkActive(mark)\n      if (isActive) {\n        debug(`Remove mark '${mark}'`)\n        Editor.removeMark(editor, mark)\n      } else {\n        debug(`Add mark '${mark}'`)\n        Editor.addMark(editor, mark, true)\n      }\n      editor.onChange()\n    }\n    return editor\n  }\n\n  /**\n   * Normalize re-marked spans in selection\n   */\n  function mergeSpans(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      for (const [node, path] of Array.from(\n        Editor.nodes(editor, {\n          at: Editor.range(editor, [selection.anchor.path[0]], [selection.focus.path[0]]),\n        })\n      ).reverse()) {\n        const [parent] = path.length > 1 ? Editor.node(editor, Path.parent(path)) : [undefined]\n        const nextPath = [path[0], path[1] + 1]\n        if (Editor.isBlock(editor, parent)) {\n          const nextNode = parent.children[nextPath[1]]\n          if (Text.isText(node) && Text.isText(nextNode) && isEqual(nextNode.marks, node.marks)) {\n            debug('Merging spans')\n            Transforms.mergeNodes(editor, {at: nextPath, voids: true})\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Normalize markDefs\n   *\n   */\n  function normalizeMarkDefs(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      const blocks = Editor.nodes(editor, {\n        at: selection,\n        match: (n) => n._type === types.block.name,\n      })\n      for (const [block, path] of blocks) {\n        if (editor.isTextBlock(block)) {\n          const newMarkDefs = (block.markDefs || []).filter((def) => {\n            return block.children.find((child) => {\n              return (\n                Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)\n              )\n            })\n          })\n          if (!isEqual(newMarkDefs, block.markDefs)) {\n            debug('Removing markDef not in use')\n            Transforms.setNodes(\n              editor,\n              {\n                markDefs: newMarkDefs,\n              },\n              {at: path}\n            )\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n}\n","import {Subject} from 'rxjs'\nimport {BaseRange} from 'slate'\nimport {\n  EditorChange,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {ObjectWithKeyAndType, toPortableTextRange} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  change$: Subject<EditorChange>,\n  types: PortableTextMemberSchemaTypes\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        debug(`Emitting selection ${JSON.stringify(ptRange || null)}`)\n        if (ptRange) {\n          change$.next({type: 'selection', selection: ptRange})\n        } else {\n          change$.next({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {Element, Operation, InsertNodeOperation, Text as SlateText} from 'slate'\nimport {\n  isPortableTextTextBlock,\n  PortableTextTextBlock,\n  isPortableTextSpan,\n  PortableTextSpan,\n  PortableTextListBlock,\n  isPortableTextListBlock,\n} from '@sanity/types'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes(types: PortableTextMemberSchemaTypes) {\n  return function withSchemaTypes(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isPortableTextTextBlock(value) && value._type === types.block.name\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type == types.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isPortableTextListBlock(value) && value._type === types.block.name\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        types.block.name !== element._type &&\n        (types.blockObjects.map((obj) => obj.name).includes(element._type) ||\n          types.inlineObjects.map((obj) => obj.name).includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = types.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n    // Extend Slate's default normalization to add _type span to span inserted after a inline void object\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      const isInsertTextWithoutType =\n        op.type === 'insert_node' &&\n        op.path.length === 2 &&\n        SlateText.isText(op.node) &&\n        op.node._type === undefined\n      if (isInsertTextWithoutType) {\n        const insertNodeOperation = op as InsertNodeOperation\n        const newNode: SlateText = {\n          ...(insertNodeOperation.node as SlateText),\n          _type: 'span',\n        }\n        op.node = newNode\n        debug('Setting span type to child without a type', op)\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Transforms, Text} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({schemaTypes, keyGenerator}: Options) {\n  return function withUtils(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0\n        const whiteSpaceAfterIndex = charsAfter.split('').findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1)\n        if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n    return editor\n  }\n}\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport {Editor, Transforms, Path, Range} from 'slate'\nimport isHotkey from 'is-hotkey'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  const createEmptyBlock = () =>\n    toSlateValue(\n      [\n        {\n          _type: types.block.name,\n          _key: keyGenerator(),\n          style: 'normal',\n          markDefs: [],\n          children: [\n            {\n              _type: 'span',\n              _key: keyGenerator(),\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n      ],\n      portableTextEditor\n    )[0]\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editor.pteToggleMark(mark)\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isBackspace = isHotkey('backspace', event.nativeEvent)\n      const isDelete = isHotkey('delete', event.nativeEvent)\n\n      // Disallow deleting void blocks by backspace from another line.\n      // Otherwise it's so easy to delete the void block above when trying to delete text on\n      // the line below or above\n      if (\n        isBackspace &&\n        editor.selection &&\n        editor.selection.focus.path[0] > 0 &&\n        Range.isCollapsed(editor.selection)\n      ) {\n        const [prevBlock, prevPath] = Editor.node(\n          editor,\n          Path.previous(editor.selection.focus.path.slice(0, 1))\n        )\n        const [focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          prevBlock &&\n          focusBlock &&\n          Editor.isVoid(editor, prevBlock) &&\n          editor.selection.focus.offset === 0\n        ) {\n          debug('Preventing deleting void block above')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, prevPath)\n          editor.onChange()\n          return\n        }\n      }\n      if (\n        isDelete &&\n        editor.selection &&\n        editor.selection.focus.offset === 0 &&\n        Range.isCollapsed(editor.selection) &&\n        editor.children[editor.selection.focus.path[0] + 1]\n      ) {\n        const [nextBlock] = Editor.node(editor, Path.next(editor.selection.focus.path.slice(0, 1)))\n        const [focusBlock, focusBlockPath] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          nextBlock &&\n          focusBlock &&\n          !Editor.isVoid(editor, focusBlock) &&\n          Editor.isVoid(editor, nextBlock)\n        ) {\n          debug('Preventing deleting void block below')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, focusBlockPath)\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {depth: 2})\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m)\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        let focusBlock\n        try {\n          ;[focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        } catch (err) {\n          // Just ignore\n        }\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n\n        // Enter from another style than the first (default one)\n        if (\n          editor.isTextBlock(focusBlock) &&\n          focusBlock.style &&\n          focusBlock.style !== types.styles[0].value\n        ) {\n          const [, end] = Range.edges(editor.selection)\n          const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n          if (endAtEndOfNode) {\n            Editor.insertNode(editor, createEmptyBlock())\n            event.preventDefault()\n            return\n          }\n        }\n        // Block object enter key\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Editor.insertNode(editor, createEmptyBlock())\n          event.preventDefault()\n          return\n        }\n      }\n\n      // Soft line breaks\n      if (isShiftEnter) {\n        event.preventDefault()\n        editor.insertText('\\n')\n        return\n      }\n\n      // Undo/redo\n      if (isHotkey('mod+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.undo()\n        return\n      }\n      if (isHotkey('mod+y', event.nativeEvent) || isHotkey('mod+shift+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.redo()\n      }\n    }\n    return editor\n  }\n}\n","import {PortableTextBlock, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {flatten, isObject, uniq} from 'lodash'\nimport {set, unset, insert} from '../patch/PatchEvent'\nimport {InvalidValueResolution, PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)]\n  const validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description: 'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key) {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n          }\n          return true\n        }\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every child in text block is valid\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has children\n        if (!textBlock.children) {\n          resolution = {\n            patches: [unset([{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' is missing required key 'children'.`,\n            action: 'Remove the block',\n            item: textBlock,\n          }\n          return true\n        }\n        // Test that markDefs exists\n        if (!blk.markDefs) {\n          resolution = {\n            patches: [set({...textBlock, markDefs: []}, [{_key: textBlock._key}])],\n            description: `Block is missing required key 'markDefs'.`,\n            action: 'Add empty markDefs array',\n            item: textBlock,\n          }\n          return true\n        }\n        // NOTE: this is commented out as we want to allow the saved data to have optional .marks for spans (as specified by the schema)\n        // const spansWithUndefinedMarks = blk.children\n        //   .filter(cld => cld._type === types.span.name)\n        //   .filter(cld => typeof cld.marks === 'undefined')\n\n        // if (spansWithUndefinedMarks.length > 0) {\n        //   const first = spansWithUndefinedMarks[0]\n        //   resolution = {\n        //     patches: [\n        //       set({...first, marks: []}, [{_key: blk._key}, 'children', {_key: first._key}])\n        //     ],\n        //     description: `Span has no .marks array`,\n        //     action: 'Add empty marks array',\n        //     item: first\n        //   }\n        //   return true\n        // }\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || [])\n          ) as string[]\n        )\n        // Note: this is commented out as it may be a bit too strict:\n        // // Test that all markDefs are in use\n        // if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        //   const unusedMarkDefs: string[] = uniq(\n        //     blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key))\n        //   )\n        //   if (unusedMarkDefs.length > 0) {\n        //     resolution = {\n        //       patches: unusedMarkDefs.map((key) =>\n        //         unset([{_key: blk._key}, 'markDefs', {_key: key}])\n        //       ),\n        //       description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n        //         ', '\n        //       )}.`,\n        //       action: 'Remove unused mark definition item',\n        //       item: blk,\n        //     }\n        //     return true\n        //   }\n        // }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark)\n        )\n        const orphanedMarks = annotationMarks.filter((mark) =>\n          textBlock.markDefs ? !textBlock.markDefs.find((def) => def._key === mark) : false\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark))\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            resolution = {\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks']\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphanedMarks.join(\n                ', '\n              )}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n            }\n            return true\n          }\n        }\n\n        // Test that children is lengthy\n        if (textBlock.children && textBlock.children.length === 0) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n          }\n          resolution = {\n            patches: [insert([newSpan], 'after', [{_key: blk._key}, 'children', 0])],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n          }\n          return true\n        }\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!child._key) {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                patches: [set(newChild, [{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that children have valid types\n            if (!child._type || validChildTypes.includes(child._type) === false) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that spans have .text\n            if (child._type === types.span.name && child.text === undefined) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing text property!`,\n                action: `Write an empty .text to the object`,\n                item: blk,\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import {Node, Transforms, Editor, Descendant, Range} from 'slate'\nimport {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  EditorChanges,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../../utils/values'\nimport {validateValue} from '../../utils/validateValue'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  change$: EditorChanges,\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withInsertData(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach((zw) => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      })\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData('application/x-portable-text-event-origin', originEvent || 'external')\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            keyGenerator,\n            spanTypeName\n          )\n          // Validate the result\n          const validation = validateValue(parsed, schemaTypes, keyGenerator)\n          // Bail out if it's not valid\n          if (!validation.valid) {\n            const errorDescription = `${validation.resolution?.description}`\n            change$.next({\n              type: 'error',\n              level: 'warning',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      change$.next({type: 'loading', isLoading: true}) // This could potentially take some time\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>'\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(portableText, schemaTypes, keyGenerator)\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          change$.next({\n            type: 'error',\n            level: 'warning',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`)\n        _insertFragment(editor, fragment, schemaTypes)\n        change$.next({type: 'loading', isLoading: false})\n        return true\n      }\n      change$.next({type: 'loading', isLoading: false})\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? // eslint-disable-next-line max-nested-callbacks\n                      [...child.marks].filter((mark) => mark !== oldKey).concat(newKey)\n                    : child.marks,\n              }\n            : child\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes\n) {\n  if (!editor.selection) {\n    return\n  }\n\n  // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n  const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {depth: 1})\n  if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n    const {markDefs} = focusBlock\n    debug('Mixing markDefs of focusBlock and fragments[0] block', markDefs, fragment[0].markDefs)\n    if (!isEqual(markDefs, fragment[0].markDefs)) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: uniq([...(fragment[0].markDefs || []), ...(markDefs || [])]),\n        },\n        {at: focusPath, mode: 'lowest', voids: false}\n      )\n    }\n  }\n\n  const isPasteToEmptyEditor = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n  if (isPasteToEmptyEditor) {\n    // Special case for pasting directly into an empty editor (a placeholder block).\n    // When pasting content starting with multiple empty blocks,\n    // `editor.insertFragment` can potentially duplicate the keys of\n    // the placeholder block because of operations that happen\n    // inside `editor.insertFragment` (involves an `insert_node` operation).\n    // However by splitting the placeholder block first in this situation we are good.\n    Transforms.splitNodes(editor, {at: [0, 0]})\n    editor.insertFragment(fragment)\n    Transforms.removeNodes(editor, {at: [0]})\n  } else {\n    // All other inserts\n    editor.insertFragment(fragment)\n  }\n  editor.onChange()\n}\n","import {BaseOperation, Editor, NodeEntry, Node} from 'slate'\nimport {noop} from 'lodash'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<PortableTextSlateEditor, OriginalEditorFunctions>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions\n): {editor: PortableTextSlateEditor; subscribe: () => () => void} => {\n  const e = editor as T & PortableTextSlateEditor\n  const {keyGenerator, portableTextEditor, patches$, readOnly, maxBlocks, isPending} = options\n  const {schemaTypes, change$} = portableTextEditor\n  e.subscriptions = []\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(schemaTypes, keyGenerator)\n  const withSchemaTypes = createWithSchemaTypes(schemaTypes)\n  const withEditableAPI = createWithEditableAPI(portableTextEditor, schemaTypes, keyGenerator)\n  const withPatches = createWithPatches({\n    change$,\n    isPending,\n    keyGenerator,\n    patches$,\n    patchFunctions: operationToPatches,\n    readOnly,\n    schemaTypes,\n  })\n  const withMaxBlocks = createWithMaxBlocks(maxBlocks || -1)\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const withUndoRedo = createWithUndoRedo({readOnly, patches$})\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(schemaTypes)\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(schemaTypes, change$)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock({\n    keyGenerator,\n    schemaTypes,\n  })\n\n  const withUtils = createWithUtils({keyGenerator, schemaTypes})\n  const withPortableTextSelections = createWithPortableTextSelections(change$, schemaTypes)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.onChange = originalFunctions.onChange\n    e.apply = originalFunctions.apply\n    e.normalizeNode = originalFunctions.normalizeNode\n  }\n  if (readOnly) {\n    return {\n      editor: withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withUtils(\n                withPlaceholderBlock(\n                  withPortableTextLists(withPortableTextSelections(withEditableAPI(e)))\n                )\n              )\n            )\n          )\n        )\n      ),\n      subscribe: () => noop,\n    }\n  }\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return {\n    editor: withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPortableTextLists(\n              withPlaceholderBlock(\n                withUtils(\n                  withMaxBlocks(\n                    withUndoRedo(withPatches(withPortableTextSelections(withEditableAPI(e))))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    ),\n    subscribe: () => {\n      const unsubscribes: (() => void)[] = []\n      editor.subscriptions.forEach((subscribeFn) => {\n        unsubscribes.push(subscribeFn())\n      })\n      return () => {\n        unsubscribes.forEach((unsubscribeFn) => {\n          unsubscribeFn()\n        })\n      }\n    },\n  }\n}\n","import React, {PropsWithChildren, useEffect, useMemo} from 'react'\nimport {Slate, withReact} from '@sanity/slate-react'\nimport {createEditor} from 'slate'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {debugWithName} from '../../utils/debug'\nimport {PatchObservable} from '../../types/editor'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {withPlugins} from '../plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\n/**\n * @internal\n */\nexport interface SlateContainerProps extends PropsWithChildren {\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  maxBlocks: number | undefined\n  patches$?: PatchObservable\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\n/**\n * Sets up and encapsulates the Slate instance\n * @internal\n */\nexport function SlateContainer(props: SlateContainerProps) {\n  const {patches$, portableTextEditor, readOnly, maxBlocks, keyGenerator, isPending} = props\n\n  // Create the slate instance\n  const [slateEditor, subscribe] = useMemo(() => {\n    debug('Creating new Slate editor instance')\n    const {editor, subscribe: _sub} = withPlugins(withReact(createEditor()), {\n      isPending,\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n    KEY_TO_VALUE_ELEMENT.set(editor, {})\n    KEY_TO_SLATE_ELEMENT.set(editor, {})\n    return [editor, _sub]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // Only initial - empty deps here\n\n  useEffect(() => {\n    const unsubscribe = subscribe()\n    return () => {\n      unsubscribe()\n    }\n  }, [subscribe])\n\n  // Update the slate instance when plugin dependent props change.\n  useEffect(() => {\n    debug('Re-initializing plugin chain')\n    withPlugins(slateEditor, {\n      isPending,\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n  }, [keyGenerator, portableTextEditor, maxBlocks, readOnly, patches$, slateEditor, isPending])\n\n  const initialValue = useMemo(() => {\n    return [slateEditor.createPlaceholderBlock()]\n  }, [slateEditor])\n\n  useEffect(() => {\n    return () => {\n      debug('Destroying Slate editor')\n      slateEditor.destroy()\n    }\n  }, [slateEditor])\n\n  return (\n    <Slate editor={slateEditor} value={initialValue}>\n      {props.children}\n    </Slate>\n  )\n}\n","/**\n * Debounce time for flushing local patches (ms since user haven't produced a patch)\n * (lower time for tests to speed them up)\n */\nexport const FLUSH_PATCHES_DEBOUNCE_MS = process.env.NODE_ENV === 'test' ? 100 : 1000\n","import {createContext, useContext} from 'react'\nimport {EditorSelection} from '../../types/editor'\n\n/**\n * A React context for sharing the editor selection.\n */\nexport const PortableTextEditorSelectionContext = createContext<EditorSelection | null>(null)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return selection\n}\n","import {createContext, useContext} from 'react'\n\nimport {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext = createContext<PortableTextEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n\n  return editor\n}\n","import {PortableTextBlock} from '@sanity/types'\nimport {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor value.\n */\nexport const PortableTextEditorValueContext = createContext<PortableTextBlock[] | undefined>(\n  undefined\n)\n\n/**\n * Get the current editor value from the React context.\n */\nexport const usePortableTextEditorValue = () => {\n  return useContext(PortableTextEditorValueContext)\n}\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return readOnly\n}\n","/* eslint-disable max-nested-callbacks */\nimport React, {useMemo, useRef} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Transforms, Node, Descendant} from 'slate'\nimport {useSlate} from '@sanity/slate-react'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {EditorChange, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {KEY_TO_SLATE_ELEMENT} from '../../utils/weakMaps'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport {validateValue} from '../../utils/validateValue'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps\n): (value: PortableTextBlock[] | undefined, userCallbackFn?: () => void) => void {\n  const {portableTextEditor, isPending, readOnly, keyGenerator} = props\n  const {change$, schemaTypes} = portableTextEditor\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  const slateEditor = useSlate()\n  return useMemo(\n    () => (value: PortableTextBlock[] | undefined) => {\n      // Don't sync the value if there are pending local changes.\n      // The value will be synced again after the local changes are submitted.\n      if (isPending.current && !readOnly) {\n        debug('Has local patches')\n        return\n      }\n\n      if (previousValue.current === value) {\n        debug('Value is the same object')\n        change$.next({type: 'value', value})\n        return\n      }\n\n      if (value && value.length === 0) {\n        const validation = validateValue(value, schemaTypes, keyGenerator)\n        change$.next({\n          type: 'invalidValue',\n          resolution: validation.resolution,\n          value,\n        })\n        return\n      }\n\n      let isChanged = false\n      previousValue.current = value\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        withoutSaving(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            Editor.withoutNormalizing(slateEditor, () => {\n              const hadSelection = !!slateEditor.selection\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(slateEditor, slateEditor.createPlaceholderBlock(), {at: [0]})\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(\n          value,\n          {\n            schemaTypes,\n          },\n          KEY_TO_SLATE_ELEMENT.get(slateEditor)\n        )\n        withoutSaving(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            Editor.withoutNormalizing(slateEditor, () => {\n              const childrenLength = slateEditor.children.length\n              // Remove blocks that have become superfluous\n              if (slateValueFromProps.length < childrenLength) {\n                for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n                  Transforms.removeNodes(slateEditor, {\n                    at: [i],\n                  })\n                }\n                isChanged = true\n              }\n              // Go through all of the blocks and see if they need to be updated\n              slateValueFromProps.forEach((currentBlock, currentBlockIndex) => {\n                const oldBlock = slateEditor.children[currentBlockIndex]\n                const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n                if (hasChanges) {\n                  const validationValue = [value[currentBlockIndex]]\n                  const validation = validateValue(validationValue, schemaTypes, keyGenerator)\n                  if (validation.valid) {\n                    if (oldBlock._key === currentBlock._key) {\n                      debug('Updating block', oldBlock, currentBlock)\n                      _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)\n                    } else {\n                      debug('Replacing block', oldBlock, currentBlock)\n                      _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n                    }\n                    isChanged = true\n                  } else {\n                    change$.next({\n                      type: 'invalidValue',\n                      resolution: validation.resolution,\n                      value,\n                    })\n                  }\n                }\n                // Insert new blocks exceeding the original value.\n                if (!oldBlock) {\n                  const validationValue = [value[currentBlockIndex]]\n                  debug('Adding and validating new block', currentBlock)\n                  const validation = validateValue(validationValue, schemaTypes, keyGenerator)\n                  if (validation.valid) {\n                    withPreserveKeys(slateEditor, () => {\n                      Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n                    })\n                  } else {\n                    change$.next({\n                      type: 'invalidValue',\n                      resolution: validation.resolution,\n                      value,\n                    })\n                  }\n                }\n              })\n            })\n          })\n        })\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        Editor.normalize(slateEditor)\n        slateEditor.onChange()\n        change$.next({type: 'value', value})\n      } else {\n        debug('Server value and editor value is the same, no need to sync.')\n      }\n    },\n    [change$, isPending, keyGenerator, readOnly, schemaTypes, slateEditor]\n  )\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  withPreserveKeys(slateEditor, () => {\n    Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  })\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach(\n        (_, index) => {\n          const childIndex = oldBlockChildrenLength - 1 - index\n          if (childIndex > 0) {\n            debug('Removing child')\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, childIndex],\n            })\n          }\n        }\n      )\n    }\n    currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n      const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n      if (isChildChanged) {\n        // Update if this is the same child\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug('Updating changed child', currentBlockChild)\n          Transforms.setNodes(slateEditor, currentBlockChild as Partial<Node>, {\n            at: [currentBlockIndex, currentBlockChildIndex],\n          })\n          // If it's a inline block, also update the void text node key\n          if (currentBlockChild._type !== 'span') {\n            debug('Updating changed inline object child', currentBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              {_key: `${currentBlock._key}-void-child`},\n              {\n                at: [currentBlockIndex, currentBlockChildIndex, 0],\n                voids: true,\n              }\n            )\n          }\n          // Replace the child if _key's are different\n        } else if (oldBlockChild) {\n          debug('Replacing child', currentBlockChild)\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, currentBlockChildIndex],\n          })\n          withPreserveKeys(slateEditor, () => {\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n          })\n          // Insert it if it didn't exist before\n        } else if (!oldBlockChild) {\n          debug('Inserting new child', currentBlockChild)\n          withPreserveKeys(slateEditor, () => {\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n          })\n        }\n      }\n    })\n  }\n}\n","import React, {\n  PropsWithChildren,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {PortableTextBlock} from '@sanity/types'\nimport {debounce} from 'lodash'\nimport {EditorChange, EditorChanges, EditorSelection} from '../../types/editor'\nimport {Patch} from '../../types/patch'\nimport {FLUSH_PATCHES_DEBOUNCE_MS} from '../../constants'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextEditor} from '../PortableTextEditor'\nimport {PortableTextEditorSelectionContext} from '../hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorContext} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditorValueContext} from '../hooks/usePortableTextEditorValue'\nimport {PortableTextEditorReadOnlyContext} from '../hooks/usePortableTextReadOnly'\nimport {useSyncValue} from '../hooks/useSyncValue'\nimport {PortableTextEditorKeyGeneratorContext} from '../hooks/usePortableTextEditorKeyGenerator'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps extends PropsWithChildren {\n  change$: EditorChanges\n  portableTextEditor: PortableTextEditor\n  isPending: React.MutableRefObject<boolean | null>\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  readOnly: boolean\n  value: PortableTextBlock[] | undefined\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {change$, portableTextEditor, isPending, onChange, keyGenerator, readOnly, value} = props\n  const [selection, setSelection] = useState<EditorSelection>(null)\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    isPending,\n    keyGenerator,\n    onChange,\n    portableTextEditor,\n    readOnly,\n  })\n\n  const onFlushPendingPatches = useCallback(() => {\n    const finalPatches = [...pendingPatches.current]\n    debug('Flushing pending patches', finalPatches)\n    if (finalPatches.length > 0) {\n      pendingPatches.current = pendingPatches.current.splice(\n        finalPatches.length,\n        pendingPatches.current.length\n      )\n      onChange({type: 'mutation', patches: finalPatches})\n    }\n  }, [onChange])\n\n  // Debounced version of flush pending patches\n  const onFlushPendingPatchesDebounced = useMemo(\n    () =>\n      debounce(onFlushPendingPatches, FLUSH_PATCHES_DEBOUNCE_MS, {\n        leading: false,\n        trailing: true,\n      }),\n    [onFlushPendingPatches]\n  )\n\n  // Flush pending patches on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'patch':\n          isPending.current = true\n          pendingPatches.current.push(next.patch)\n          onChange(next)\n          onFlushPendingPatchesDebounced()\n          break\n        case 'selection':\n          // Set the selection state in a transition, we don't need the state immediately.\n          startTransition(() => {\n            debug('Setting selection')\n            setSelection(next.selection)\n          })\n          onChange(next) // Keep this out of the startTransition!\n          break\n        default:\n          onChange(next)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, onFlushPendingPatchesDebounced, onChange, syncValue, isPending])\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      change$.next({type: 'loading', isLoading: false})\n      change$.next({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [change$, syncValue, value])\n\n  return (\n    <PortableTextEditorKeyGeneratorContext.Provider value={keyGenerator}>\n      <PortableTextEditorContext.Provider value={portableTextEditor}>\n        <PortableTextEditorValueContext.Provider value={value}>\n          <PortableTextEditorReadOnlyContext.Provider value={readOnly}>\n            <PortableTextEditorSelectionContext.Provider value={selection}>\n              {props.children}\n            </PortableTextEditorSelectionContext.Provider>\n          </PortableTextEditorReadOnlyContext.Provider>\n        </PortableTextEditorValueContext.Provider>\n      </PortableTextEditorContext.Provider>\n    </PortableTextEditorKeyGeneratorContext.Provider>\n  )\n}\n","import React, {PropsWithChildren, createRef} from 'react'\nimport {\n  ArrayDefinition,\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {Subject} from 'rxjs'\nimport {compileType} from '../utils/schema'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {defaultKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {SlateContainer} from './components/SlateContainer'\nimport {Synchronizer} from './components/Synchronizer'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps = PropsWithChildren<{\n  /**\n   * Function that gets called when the editor changes the value\n   */\n  onChange: (change: EditorChange) => void\n\n  /**\n   * Schema type for the portable text field\n   */\n  schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n  /**\n   * Maximum number of blocks to allow within the editor\n   */\n  maxBlocks?: number | string\n\n  /**\n   * Whether or not the editor should be in read-only mode\n   */\n  readOnly?: boolean\n\n  /**\n   * The current value of the portable text field\n   */\n  value?: PortableTextBlock[]\n\n  /**\n   * Function used to generate keys for array items (`_key`)\n   */\n  keyGenerator?: () => string\n\n  /**\n   * Observable of local and remote patches for the edited value.\n   */\n  patches$?: PatchObservable\n\n  /**\n   * Backward compatibility (renamed to patches$).\n   */\n  incomingPatches$?: PatchObservable\n}>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends React.Component<PortableTextEditorProps> {\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor API (currently implemented with Slate).\n   */\n  private editable?: EditableAPI\n  /**\n   * This reference tracks if we are in a pending local edit state. If local changes are unsettled (patches yet not submitted and result returned),\n   * we use it to make sure we don't handle any new props.value or remote patches that can interfere with the user's typing until the local changes are solved.\n   */\n  private isPending: React.MutableRefObject<boolean | null>\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (!props.schemaType) {\n      throw new Error('PortableTextEditor: missing \"type\" property')\n    }\n\n    if (props.incomingPatches$) {\n      console.warn(`The prop 'incomingPatches$' is deprecated and renamed to 'patches$'`)\n    }\n\n    this.change$.next({type: 'loading', isLoading: true})\n\n    this.isPending = createRef()\n    this.isPending.current = false\n\n    this.schemaTypes = getPortableTextMemberSchemaTypes(\n      props.schemaType.hasOwnProperty('jsonType') ? props.schemaType : compileType(props.schemaType)\n    )\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (this.props.schemaType !== prevProps.schemaType) {\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType)\n      )\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n  }\n\n  render() {\n    const {onChange, value, children, patches$, incomingPatches$} = this.props\n    const {change$, isPending} = this\n    const _patches$ = incomingPatches$ || patches$ // Backward compatibility\n\n    const maxBlocks =\n      typeof this.props.maxBlocks === 'undefined'\n        ? undefined\n        : parseInt(this.props.maxBlocks.toString(), 10) || undefined\n\n    const readOnly = Boolean(this.props.readOnly)\n    const keyGenerator = this.props.keyGenerator || defaultKeyGenerator\n    return (\n      <SlateContainer\n        isPending={isPending}\n        keyGenerator={keyGenerator}\n        maxBlocks={maxBlocks}\n        patches$={_patches$}\n        portableTextEditor={this}\n        readOnly={readOnly}\n      >\n        <Synchronizer\n          change$={change$}\n          isPending={isPending}\n          keyGenerator={keyGenerator}\n          onChange={onChange}\n          portableTextEditor={this}\n          readOnly={readOnly}\n          value={value}\n        >\n          {children}\n        </Synchronizer>\n      </SlateContainer>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (editor: PortableTextEditor): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static addAnnotation = (\n    editor: PortableTextEditor,\n    type: ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): {spanPath: Path; markDefPath: Path} | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild\n  ) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (editor: PortableTextEditor): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = (\n    editor: PortableTextEditor,\n    type: SpanSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = (\n    editor: PortableTextEditor,\n    type: BlockSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (editor: PortableTextEditor, selection: EditorSelection | null) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = (editor: PortableTextEditor, type: ObjectSchemaType) =>\n    editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n}\n","import {isEqual} from 'lodash'\nimport type {Patch} from '../types/patch'\n\n/**\n * Try to compact a set of patches\n *\n */\nexport function compactPatches(patches: Patch[]) {\n  // If the last patch is unsetting everything, just do that\n  const lastPatch = patches.slice(-1)[0]\n  if (lastPatch && lastPatch.type === 'unset' && lastPatch.path.length === 0) {\n    return [lastPatch]\n  }\n  let finalPatches = patches\n  // Run through the patches and remove any redundant ones.\n  finalPatches = finalPatches.filter((patch, index) => {\n    if (!patch) {\n      return false\n    }\n    const nextPatch = finalPatches[index + 1]\n    if (\n      nextPatch &&\n      nextPatch.type === 'set' &&\n      patch.type === 'set' &&\n      isEqual(patch.path, nextPatch.path)\n    ) {\n      return false\n    }\n    return true\n  })\n  if (finalPatches.length !== patches.length) {\n    return finalPatches\n  }\n  return patches\n}\n","import {isEqual} from 'lodash'\nimport {Path, PortableTextBlock} from '@sanity/types'\nimport {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[]\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' && '_key' in point.path[0] && point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' && '_key' in point.path[2] && point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find((blk) => blk._key === blockKey)\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (!block.children || (Array.isArray(block.children) && block.children.length === 0)) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (anchor && value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus}\n  }\n  return null\n}\n","import {PortableTextObject} from '@sanity/types'\nimport React, {useCallback} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: React.ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  // eslint-disable-next-line no-alert\n  const handleClick = useCallback(() => alert(JSON.stringify(props.annotation)), [props.annotation])\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n","import React, {\n  ReactElement,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {Text} from 'slate'\nimport {RenderLeafProps, useSelected} from '@sanity/slate-react'\nimport {isEqual, uniq} from 'lodash'\nimport {Path, PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {\n  RenderChildFunction,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderDecoratorFunction,\n  BlockDecoratorRenderProps,\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  children: ReactElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {attributes, children, leaf, schemaTypes, renderChild, renderDecorator, renderAnnotation} =\n    props\n  const spanRef = React.useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key]\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators]\n  )\n  const marks: string[] = useMemo(\n    () => uniq((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))),\n    [decoratorValues, leaf.marks]\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) && block?.markDefs?.find((def) => def._key === mark)\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues]\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n    const sub = portableTextEditor.change$.subscribe((next) => {\n      if (next.type === 'blur') {\n        setFocused(false)\n        setSelected(false)\n        return\n      }\n      if (next.type === 'focus') {\n        const sel = PortableTextEditor.getSelection(portableTextEditor)\n        if (\n          sel &&\n          isEqual(sel.focus.path, path) &&\n          PortableTextEditor.isCollapsedSelection(portableTextEditor)\n        ) {\n          setFocused(true)\n        }\n        setSelectedFromRange()\n        return\n      }\n      if (next.type === 'selection') {\n        if (\n          next.selection &&\n          isEqual(next.selection.focus.path, path) &&\n          PortableTextEditor.isCollapsedSelection(portableTextEditor)\n        ) {\n          setFocused(true)\n        } else {\n          setFocused(false)\n        }\n        setSelectedFromRange()\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find((dec) => dec.value === mark)\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> = Object.defineProperty(\n            {\n              children: returnedChildren,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType,\n              value: mark,\n            },\n            'type',\n            {\n              enumerable: false,\n              get() {\n                console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                return schemaType\n              },\n            }\n          )\n          returnedChildren = renderDecorator(_props as BlockDecoratorRenderProps)\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find((t) => t.name === annotation._type)\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> = Object.defineProperty(\n                {\n                  block,\n                  children: returnedChildren,\n                  editorElementRef: spanRef,\n                  focused,\n                  path,\n                  selected,\n                  schemaType,\n                  value: annotation,\n                },\n                'type',\n                {\n                  enumerable: false,\n                  get() {\n                    console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                    return schemaType\n                  },\n                }\n              )\n\n              returnedChildren = (\n                <span ref={spanRef}>{renderAnnotation(_props as BlockAnnotationRenderProps)}</span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> = Object.defineProperty(\n            {\n              annotations,\n              children: defaultRendered,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              schemaType: schemaTypes.span,\n              selected,\n              value: child,\n            },\n            'type',\n            {\n              enumerable: false,\n              get() {\n                console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                return schemaTypes.span\n              },\n            }\n          )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content]\n  )\n}\n","import {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport React from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nexport default DefaultObject\n","import styled from 'styled-components'\n\nexport const DefaultBlockObject = styled.div`\n  user-select: none;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span`\n  background: #999;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import React, {useState, useRef, useMemo, useCallback, DragEvent, useEffect} from 'react'\nimport {Element as SlateElement, Transforms, Path, Editor} from 'slate'\nimport {ReactEditor, useSlateStatic} from '@sanity/slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING_ELEMENT_TARGET,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: React.ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({children, element, readOnly, blockRef}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n  const isInline = useMemo(() => Editor.isInline(editor, element), [editor, element])\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () => setBlockElement(blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element)),\n    [editor, element, blockRef]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (dragPosition === 'top' && isBefore && targetPath[0] !== editor.children.length - 1) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath\n          )} (${dragPosition})`\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element]\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element]\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid]\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector('[data-pt-drag-ghost-element]')\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid]\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    []\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n","/* eslint-disable complexity */\n/* eslint-disable max-statements */\nimport React, {ReactElement, FunctionComponent, useRef, useMemo} from 'react'\nimport {Element as SlateElement, Editor, Range} from 'slate'\nimport {Path, PortableTextChild, PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {useSelected, useSlateStatic, ReactEditor, RenderElementProps} from '@sanity/slate-react'\nimport {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {fromSlateValue} from '../../utils/values'\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {DefaultBlockObject, DefaultListItem, DefaultListItemInner} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n\n  const value = useMemo(\n    () => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0],\n    [editor, element, schemaTypes.block.name]\n  )\n\n  let renderedBlock = children\n\n  let className\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type)\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [{_key: block._key}, 'children', {_key: element._key}]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style)\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item) => item.value === element.listItem)\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n          return schemaTypes.block\n        },\n      }\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div key={element._key} {...attributes} className={className} spellCheck={spellCheck}>\n        <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find((_type) => _type.name === element._type)\n  if (!schemaType) {\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`)\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor)\n  )[0]\n  let renderedBlockFromProps\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n          return schemaType\n        },\n      }\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n","import React, {useRef, useLayoutEffect, useEffect} from 'react'\n\nconst useIsomorphicEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect\n\nexport function useForwardedRef<T>(ref: React.ForwardedRef<T>): React.MutableRefObject<T | null> {\n  const innerRef = useRef<T | null>(null)\n\n  useIsomorphicEffect(() => {\n    if (!ref) return\n\n    if (typeof ref === 'function') {\n      ref(innerRef.current)\n    } else {\n      ref.current = innerRef.current\n    }\n  })\n\n  return innerRef\n}\n","import {BaseRange, Transforms, Text} from 'slate'\nimport React, {useCallback, useMemo, useEffect, forwardRef, useState} from 'react'\nimport {\n  Editable as SlateEditable,\n  ReactEditor,\n  RenderElementProps,\n  RenderLeafProps,\n  useSlate,\n} from '@sanity/slate-react'\nimport {noop} from 'lodash'\nimport {\n  EditorChange,\n  EditorSelection,\n  OnBeforeInputFn,\n  OnCopyFn,\n  OnPasteFn,\n  OnPasteResult,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport {HotkeyOptions} from '../types/options'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../utils/values'\nimport {normalizeSelection} from '../utils/selection'\nimport {toSlateRange} from '../utils/ranges'\nimport {debugWithName} from '../utils/debug'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\nimport {usePortableTextEditorKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {Leaf} from './components/Leaf'\nimport {Element} from './components/Element'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {createWithInsertData, createWithHotkeys} from './plugins'\nimport {useForwardedRef} from './hooks/useForwardedRef'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: React.CSSProperties = {\n  opacity: 0.5,\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n}\n\nconst EMPTY_DECORATORS: BaseRange[] = []\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: OnBeforeInputFn\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: () => React.ReactNode\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef(function PortableTextEditable(\n  props: PortableTextEditableProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'onPaste'>,\n  forwardedRef: React.ForwardedRef<HTMLDivElement>\n) {\n  const {\n    hotkeys,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const keyGenerator = usePortableTextEditorKeyGenerator()\n  const ref = useForwardedRef(forwardedRef)\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  const {change$, schemaTypes} = portableTextEditor\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // React/UI-specific plugins\n  const withInsertData = useMemo(\n    () => createWithInsertData(change$, schemaTypes, keyGenerator),\n    [change$, keyGenerator, schemaTypes]\n  )\n  const withHotKeys = useMemo(\n    () => createWithHotkeys(schemaTypes, keyGenerator, portableTextEditor, hotkeys),\n    [hotkeys, keyGenerator, portableTextEditor, schemaTypes]\n  )\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [readOnly, slateEditor, withHotKeys, withInsertData])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]\n  )\n\n  const renderLeaf = useCallback(\n    (lProps: RenderLeafProps & {leaf: Text & {placeholder?: boolean}}) => {\n      const rendered = (\n        <Leaf\n          {...lProps}\n          schemaTypes={schemaTypes}\n          renderAnnotation={renderAnnotation}\n          renderChild={renderChild}\n          renderDecorator={renderDecorator}\n          readOnly={readOnly}\n        />\n      )\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === '') {\n        return (\n          <>\n            <div style={PLACEHOLDER_STYLE} contentEditable={false}>\n              {renderPlaceholder()}\n            </div>\n            {rendered}\n          </>\n        )\n      }\n      return rendered\n    },\n    [readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder, schemaTypes]\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName)\n      )\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`)\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            change$.next({type: 'selection', selection: normalizedSelection})\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [propsSelection, slateEditor, blockTypeName, change$])\n\n  // Subscribe to change$ and restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'ready':\n          restoreSelectionFromProps()\n          break\n        case 'invalidValue':\n          setHasInvalidValue(true)\n          break\n        case 'value':\n          setHasInvalidValue(false)\n          break\n        default:\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy]\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n      // Resolve it as promise (can be either async promise or sync return value)\n      new Promise<OnPasteResult>((resolve) => {\n        resolve(\n          onPaste({\n            event,\n            value: PortableTextEditor.getValue(portableTextEditor),\n            path: slateEditor.selection?.focus.path || [],\n            schemaTypes,\n          })\n        )\n      })\n        .then((result) => {\n          debug('Custom paste function from client resolved', result)\n          change$.next({type: 'loading', isLoading: true})\n          if (!result || !result.insert) {\n            debug('No result from custom paste handler, pasting normally')\n            slateEditor.insertData(event.clipboardData)\n            return\n          }\n          if (result && result.insert) {\n            slateEditor.insertFragment(toSlateValue(result.insert, {schemaTypes}))\n            change$.next({type: 'loading', isLoading: false})\n            return\n          }\n          console.warn('Your onPaste function returned something unexpected:', result)\n        })\n        .catch((error) => {\n          change$.next({type: 'loading', isLoading: false})\n          console.error(error) // eslint-disable-line no-console\n          return error\n        })\n    },\n    [change$, onPaste, portableTextEditor, schemaTypes, slateEditor]\n  )\n\n  const handleOnFocus = useCallback(() => {\n    change$.next({type: 'focus'})\n  }, [change$])\n\n  const handleOnBlur = useCallback(() => {\n    change$.next({type: 'blur'})\n  }, [change$])\n\n  const handleOnBeforeInput = useCallback(\n    (event: Event) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput]\n  )\n\n  const handleKeyDown = slateEditor.pteWithHotKeys\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate = useCallback(() => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        },\n      ]\n    }\n    return EMPTY_DECORATORS\n  }, [schemaTypes, slateEditor])\n\n  // The editor\n  const slateEditable = useMemo(\n    () => (\n      <SlateEditable\n        autoFocus={false}\n        className=\"pt-editable\"\n        decorate={decorate}\n        onBlur={handleOnBlur}\n        onCopy={handleCopy}\n        onDOMBeforeInput={handleOnBeforeInput}\n        onFocus={handleOnFocus}\n        onKeyDown={handleKeyDown}\n        onPaste={handlePaste}\n        readOnly={readOnly}\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n      />\n    ),\n    [\n      decorate,\n      handleCopy,\n      handleKeyDown,\n      handleOnBeforeInput,\n      handleOnBlur,\n      handleOnFocus,\n      handlePaste,\n      readOnly,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoViewToSlate,\n    ]\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return (\n    <div ref={ref} {...restProps}>\n      {hasInvalidValue ? null : slateEditable}\n    </div>\n  )\n})\n"],"names":["compileType","rawType","Schema","compile","name","types","get","getPortableTextMemberSchemaTypes","portableTextType","_a","_b","_c","Error","blockType","of","find","findBlockType","childrenField","fields","field","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","rootName","debug","debugWithName","namespace","enabled","defaultKeyGenerator","randomKey","PortableTextEditorKeyGeneratorContext","createContext","usePortableTextEditorKeyGenerator","keyGenerator","useContext","IS_DRAGGING","WeakMap","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","op","text","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","module","exports","setIfMissing","path","DMP.diff_match_patch","diffMatchPatch","currentValue","nextValue","map","_patch","insert","items","position","set","unset","EMPTY_MARKDEFS","keepObjectEquality","object","keyMap","_key","isEqual","toSlateValue","schemaTypes","isArray","_type","rest","voidChildren","marks","isPortableText","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","children","child","cType","cKey","cRest","__inline","Element","isElement","fromSlateValue","textBlockType","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","Text","isText","createOperationToPatches","textBlockName","insertTextPatch","editor","operation","beforeValue","JSON","stringify","isTextBlock","textChild","isTextSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","default","newProperties","isUndefined","blockKey","childKey","Object","keys","forEach","keyName","val","insertNodePatch","targetKey","node","blk","splitNodePatch","splitBlock","oldBlock","targetValue","spansToUnset","slice","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","mergedSpan","targetBlock","targetSpan","moveNodePatch","newPath","targetChild","childToInsert","createKeyedPath","point","blockPath","keyedBlockPath","keyedChildPath","childPath","createArrayedPath","from","Editor","nodes","at","isKeySegment","isVoid","childIndex","findIndex","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","toSlateRange","selection","createWithEditableAPI","portableTextEditor","withEditableAPI","setEditable","Transforms","select","onChange","ReactEditor","blur","toggleMark","mark","pteToggleMark","toggleList","listStyle","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","pteIsMarkActive","err","console","warn","undo","redo","slateSelection","deselect","focusBlock","isBlock","focusChild","mode","voids","pseudoBlock","blocks","insertChild","insertNode","insertBlock","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","element","includes","findByPath","slatePath","ptBlock","ptChild","findDOMNode","item","toDOMNode","activeAnnotations","spans","depth","def","addAnnotation","SlateElement","annotationKey","setNodes","Range","isCollapsed","pteExpandToWord","textNode","withoutNormalizing","normalize","newSelection","insertNodes","end","spanPath","markDefPath","delete","hanging","nodeAndPaths","p","removeNodes","removeAnnotation","nodePath","isExpanded","newMarks","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","insertBreak","createWithMaxBlocks","maxBlocks","withMaxBlocks","apply","rows","PRESERVE_KEYS","withPreserveKeys","fn","isPreservingKeys","createWithObjectKeys","withKeys","normalizeNode","properties","withNewKey","isEditor","entry","Node","PATCHING","withoutPatching","prev","isPatching","BEFORE","AFTER","array","index","args","flatten","len","idx","normalizedIdx","copy","values","reduce","hasOwn","call","bind","move","arr","to","findTargetIndex","pathSegment","head","tail","applyPatch","clone","isObject","omit","OPERATIONS","_currentValue","_nextValue","inc","dec","SUPPORTED_PATCH_TYPES","func","applyAll","_apply","applyArrayPatch","isString","applyStringPatch","applyObjectPatch","applyPrimitivePatch","res","createPatchToOperations","findLastKey","blockIndex","indx","parsed","isSpanTextDiffMatchPatch","distance","debugState","insertPatch","blocksToInsert","posKey","isKeyedSegment","childrenToInsert","targetPath","setPatch","nextRest","prevChildren","prevRest","c","cIndex","prevSel","onSamePath","newVal","unsetPatch","previousPatch","lastKey","unit","needToAdjust","isMergeUnset","mergedChild","changed","error","segment","key","reverse","part","stateName","bufferUntil","emitWhen","source","defer","buffer","pipe","tap","switchMap","EMPTY","SAVING","MERGING","UNDO_STEP_LIMIT","isMerging","isSaving","createWithUndoRedo","readOnly","patches$","remotePatches","subscriptions","sub","subscribe","origin","time","unsubscribe","history","undos","redos","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldSave","shouldMerge","stp","createSelectOperation","timestamp","shouldClear","otherPatches","transformedOperations","transformOperation","withoutSaving","Operation","inverse","transformedOperation","adjustBlockPath","patchIsRemovingText","some","diff","splitOperation","Path","isPath","insertOffset","insertTextOperation","removeTextOperation","level","myIndex","equals","createWithPatches","change$","isPending","patchFunctions","previousChildren","patchToOperations","withPatches","every","current","concatMap","incoming","snapshot","editorWasEmpty","editorIsEmpty","next","previousValue","createWithPlaceholderBlock","withPlaceholderBlock","createPlaceholderBlock","createWithPortableTextBlockStyle","defaultStyle","withPortableTextBlockStyle","nodeEntry","SlateText","selectedBlocks","MAX_LIST_LEVEL","createWithPortableTextLists","withPortableTextLists","listItemStyle","isActive","pteUnsetListItem","pteSetListItem","isListBlock","listItem","newNode","pteEndList","pteIncrementBlockLevels","createWithPortableTextMarkModel","withPortableTextMarkModel","mergeSpans","isSpan","oldDefs","newMarkDefs","uniq","isNormalized","isElementProps","normalizeMarkDefs","splitNodes","marksWithoutAnnotationMarks","addMark","splitTextNodes","shouldRemoveMark","removeMark","eMark","existingMarks","parent","nextPath","nextNode","mergeNodes","createWithPortableTextSelections","prevSelection","withPortableTextSelections","emitPortableTextSelection","hasChanges","createWithSchemaTypes","withSchemaTypes","isPortableTextTextBlock","isPortableTextSpan","isPortableTextListBlock","obj","isInline","inlineSchemaTypes","isInsertTextWithoutType","insertNodeOperation","createWithUtils","withUtils","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","createEmptyBlock","withHotKeys","pteWithHotKeys","event","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isBackspace","isDelete","prevPath","previous","stopPropagation","nextBlock","focusBlockPath","hasAnnotationFocus","edges","atStartOfNode","isStart","endAtEndOfNode","isEnd","insertText","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","action","currentBlockTypeName","allUsedMarks","cld","annotationMarks","orphanedMarks","spanChildren","cMrk","newSpan","newChild","createWithInsertData","withInsertData","blockTypeName","spanTypeName","toPlainText","title","setFragmentData","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","attributes","hasAttribute","div","ownerDocument","createElement","appendChild","setAttribute","body","asHTML","innerHTML","removeChild","fragment","getFragment","asJSON","asPlainText","clearData","setData","insertPortableTextData","pText","getData","parse","slateValue","_regenerateKeys","validation","errorDescription","_insertFragment","insertTextOrHTMLData","isLoading","insertedType","htmlToBlocks","normalizeBlock","escapeHtml","textToHtml","insertData","insertFragmentData","insertFragment","entityMap","oldKey","newKey","nodeWithNewKeys","isPasteToEmptyEditor","originalFnMap","withPlugins","destroy","operationToPatches","withObjectKeys","withUndoRedo","originalFunctions","noop","unsubscribes","subscribeFn","unsubscribeFn","SlateContainer","props","slateEditor","useMemo","_sub","withReact","createEditor","useEffect","initialValue","Slate","FLUSH_PATCHES_DEBOUNCE_MS","process","env","NODE_ENV","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorContext","usePortableTextEditor","PortableTextEditorValueContext","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","useSyncValue","useRef","useSlate","isChanged","hadSelection","childrenLength","_","slateValueFromProps","currentBlock","currentBlockIndex","validationValue","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","Synchronizer","useState","pendingPatches","syncValue","onFlushPendingPatches","useCallback","finalPatches","onFlushPendingPatchesDebounced","debounce","leading","trailing","startTransition","isInitialValueFromProps","jsx","Provider","PortableTextEditor","React","Component","constructor","Subject","editable","schemaType","incomingPatches$","createRef","componentDidUpdate","prevProps","render","_patches$","Boolean","isObjectPath","isChildObjectEditPath","isBlockObjectEditPath","compactPatches","lastPatch","nextPatch","normalizePoint","newOffset","normalizeSelection","newAnchor","newFocus","DefaultAnnotation","handleClick","alert","annotation","color","onClick","EMPTY_MARKS","Leaf","leaf","renderChild","renderDecorator","renderAnnotation","spanRef","blockSelected","useSelected","focused","setFocused","selected","setSelected","decoratorValues","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","window","rangeCount","getRangeAt","intersectsNode","content","returnedChildren","_props","defineProperty","editorElementRef","enumerable","ref","_child","defaultRendered","DefaultObject","DefaultBlockObject","styled","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","bullets","normalizedLevel","DraggableBlock","blockRef","useSlateStatic","dragGhostRef","isDragOver","setIsDragOver","blockElement","setBlockElement","handleDragOver","isMyDragOver","dataTransfer","dropEffect","elementRect","getBoundingClientRect","top","height","Y","pageY","handleDragLeave","handleDragEnd","document","dragPosition","findPath","myPath","isBefore","originalPath","moveNodes","handleDrop","handleDrag","target","HTMLElement","opacity","handleDragStart","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","left","boxSizing","rect","clientX","clientY","width","setDragImage","isDraggingOverFirstBlock","isDraggingOverLastBlock","isDraggingOverTop","isDraggingOverBottom","dropIndicator","className","borderBottom","zIndex","jsxs","draggable","onDragStart","onDrag","onDragOver","onDragLeave","onDragEnd","onDrop","EMPTY_ANNOTATIONS","inlineBlockStyle","display","renderBlock","renderListItem","renderStyle","spellCheck","inlineBlockObjectRef","renderedBlock","elmPath","contentEditable","ObjectNode","isListItem","blockStyleType","listType","renderProps","propsOrDefaultRendered","renderedBlockFromProps","useIsomorphicEffect","useLayoutEffect","useForwardedRef","innerRef","PLACEHOLDER_STYLE","userSelect","pointerEvents","EMPTY_DECORATORS","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","hasInvalidValue","setHasInvalidValue","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","Fragment","restoreSelectionFromProps","normalizedSelection","slateRange","o","handleCopy","result","handlePaste","clipboardData","Promise","resolve","then","catch","handleOnFocus","handleOnBlur","handleOnBeforeInput","handleKeyDown","scrollSelectionIntoViewToSlate","decorate","slateEditable","SlateEditable","Editable","autoFocus","onBlur","onDOMBeforeInput","onFocus","onKeyDown"],"mappings":"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"}