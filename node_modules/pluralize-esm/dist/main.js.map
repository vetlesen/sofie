{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["export type Rule = RegExp | string\ntype CachedRule = [RegExp, string]\ntype IrregularMap = Map<string, string>\n\n// Rule storage - pluralize and singularize need to be run sequentially,\n// while other rules can be optimized using an object for instant lookups.\nconst pluralRules: CachedRule[] = []\nconst singularRules: CachedRule[] = []\nconst uncountables = new Set<string>()\nconst irregularPlurals: IrregularMap = new Map()\nconst irregularSingles: IrregularMap = new Map()\n\n/**\n * Sanitize a pluralization rule to a usable regular expression.\n */\nconst sanitizeRule = (rule: Rule): RegExp =>\n  typeof rule === 'string' ? new RegExp(`^${rule}$`, 'i') : rule\n\n/**\n * Pass in a word token to produce a function that can replicate the case on\n * another word.\n */\nconst restoreCase = (word: string, token: string | undefined): string => {\n  // Edge case\n  if (typeof token !== 'string') return word\n  // Tokens are an exact match.\n  if (word === token) return token\n\n  // Lower cased words. E.g. \"hello\".\n  if (word === word.toLowerCase()) return token.toLowerCase()\n\n  // Upper cased words. E.g. \"WHISKY\".\n  if (word === word.toUpperCase()) return token.toUpperCase()\n\n  // Title cased words. E.g. \"Title\".\n  if (word[0] === word[0].toUpperCase()) {\n    return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase()\n  }\n\n  // Lower cased words. E.g. \"test\".\n  return token.toLowerCase()\n}\n\n/**\n * Sanitize a word by passing in the word and sanitization rules.\n */\nconst sanitizeWord = (\n  token: string,\n  word: string,\n  rules: CachedRule[]\n): string => {\n  // Empty string or doesn't need fixing.\n  if (!token.length || uncountables.has(token)) {\n    return word\n  }\n\n  // Iterate over the sanitization rules and use the first one to match.\n  let { length: len } = rules\n  while (len--) {\n    const rule = rules[len]\n    if (rule[0].test(word)) {\n      // Replace a word using a rule.\n      return word.replace(rule[0], (...args) => {\n        const [match, index] = args\n        // Interpolate a regexp string.\n        const result = rule[1].replace(\n          /\\$(\\d{1,2})/g,\n          (_, index) => args[index] || ''\n        )\n\n        if (match === '') {\n          return restoreCase(word[index - 1], result)\n        }\n\n        return restoreCase(match, result)\n      })\n    }\n  }\n\n  return word\n}\n\nconst compute = (\n  word: string,\n  replaceMap: IrregularMap,\n  keepMap: IrregularMap,\n  rules: CachedRule[]\n): string => {\n  // Get the correct token and case restoration functions.\n  const token = word.toLowerCase()\n\n  // Check against the keep object map.\n  if (keepMap.has(token)) {\n    return restoreCase(word, token)\n  }\n\n  // Check against the replacement map for a direct word replacement.\n  if (replaceMap.has(token)) {\n    return restoreCase(word, replaceMap.get(token))\n  }\n\n  // Run all the rules against the word.\n  return sanitizeWord(token, word, rules)\n}\n\n/**\n * Check if a word is part of the map.\n */\nconst mapHas = (\n  word: string,\n  replaceMap: IrregularMap,\n  keepMap: IrregularMap,\n  rules: CachedRule[]\n): boolean => {\n  const token = word.toLowerCase()\n\n  if (keepMap.has(token)) return true\n  if (replaceMap.has(token)) return false\n\n  return sanitizeWord(token, token, rules) === token\n}\n\n/**\n * Pluralize or singularize a word based on the passed in count.\n *\n * @param word\n * @param count\n * @param inclusive\n */\nconst pluralize = (\n  word: string,\n  count?: number,\n  inclusive?: boolean\n): string => {\n  const pluralized =\n    count === 1 ? pluralize.singular(word) : pluralize.plural(word)\n  if (inclusive) return `${count} ${pluralized}`\n  return pluralized\n}\n\n/**\n * Pluralize a word based.\n *\n * @param word\n */\npluralize.plural = (word: string): string =>\n  compute(word, irregularSingles, irregularPlurals, pluralRules)\n\n/**\n * Singularize a word based.\n *\n * @param word\n */\npluralize.singular = (word: string): string =>\n  compute(word, irregularPlurals, irregularSingles, singularRules)\n\n/**\n * Add a pluralization rule to the collection.\n *\n * @param rule\n * @param replacement\n */\npluralize.addPluralRule = (rule: Rule, replacement: string): void => {\n  pluralRules.push([sanitizeRule(rule), replacement])\n}\n\n/**\n * Add a singularization rule to the collection.\n *\n * @param rule\n * @param replacement\n */\npluralize.addSingularRule = (rule: Rule, replacement: string): void => {\n  singularRules.push([sanitizeRule(rule), replacement])\n}\n\n/**\n * Add an irregular word definition.\n *\n * @param single\n * @param plural\n */\npluralize.addIrregularRule = (single: string, plural: string): void => {\n  const _plural = plural.toLowerCase()\n  const _single = single.toLowerCase()\n\n  irregularSingles.set(_single, _plural)\n  irregularPlurals.set(_plural, _single)\n}\n\n/**\n * Add an uncountable word rule.\n *\n * @param rule\n */\npluralize.addUncountableRule = (rule: Rule): void => {\n  if (typeof rule === 'string') {\n    uncountables.add(rule.toLowerCase())\n    return\n  }\n\n  // Set singular and plural references for the word.\n  pluralize.addPluralRule(rule, '$0')\n  pluralize.addSingularRule(rule, '$0')\n}\n\n/**\n * Test if provided word is plural.\n *\n * @param word\n */\npluralize.isPlural = (word: string): boolean =>\n  mapHas(word, irregularSingles, irregularPlurals, pluralRules)\n\n/**\n * Test if provided word is singular.\n *\n * @param word\n */\npluralize.isSingular = (word: string): boolean =>\n  mapHas(word, irregularPlurals, irregularSingles, singularRules)\n\nconst defaultIrregulars: [string, string][] = [\n  // Pronouns.\n  ['I', 'we'],\n  ['me', 'us'],\n  ['he', 'they'],\n  ['she', 'they'],\n  ['them', 'them'],\n  ['myself', 'ourselves'],\n  ['yourself', 'yourselves'],\n  ['itself', 'themselves'],\n  ['herself', 'themselves'],\n  ['himself', 'themselves'],\n  ['themself', 'themselves'],\n  ['is', 'are'],\n  ['was', 'were'],\n  ['has', 'have'],\n  ['this', 'these'],\n  ['that', 'those'],\n  ['my', 'our'],\n  ['its', 'their'],\n  ['his', 'their'],\n  ['her', 'their'],\n  // Words ending in with a consonant and `o`.\n  ['echo', 'echoes'],\n  ['dingo', 'dingoes'],\n  ['volcano', 'volcanoes'],\n  ['tornado', 'tornadoes'],\n  ['torpedo', 'torpedoes'],\n  // Ends with `us`.\n  ['genus', 'genera'],\n  ['viscus', 'viscera'],\n  // Ends with `ma`.\n  ['stigma', 'stigmata'],\n  ['stoma', 'stomata'],\n  ['dogma', 'dogmata'],\n  ['lemma', 'lemmata'],\n  ['schema', 'schemata'],\n  ['anathema', 'anathemata'],\n  // Other irregular rules.\n  ['ox', 'oxen'],\n  ['axe', 'axes'],\n  ['die', 'dice'],\n  ['yes', 'yeses'],\n  ['foot', 'feet'],\n  ['eave', 'eaves'],\n  ['goose', 'geese'],\n  ['tooth', 'teeth'],\n  ['quiz', 'quizzes'],\n  ['human', 'humans'],\n  ['proof', 'proofs'],\n  ['carve', 'carves'],\n  ['valve', 'valves'],\n  ['looey', 'looies'],\n  ['thief', 'thieves'],\n  ['groove', 'grooves'],\n  ['pickaxe', 'pickaxes'],\n  ['passerby', 'passersby'],\n  ['canvas', 'canvases']\n]\nconst defaultPlurals: [Rule, string][] = [\n  [/s?$/i, 's'],\n  [/[^\\u0000-\\u007F]$/i, '$0'],\n  [/([^aeiou]ese)$/i, '$1'],\n  [/(ax|test)is$/i, '$1es'],\n  [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n  [/(e[mn]u)s?$/i, '$1s'],\n  [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n  [\n    /(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,\n    '$1i'\n  ],\n  [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n  [/(seraph|cherub)(?:im)?$/i, '$1im'],\n  [/(her|at|gr)o$/i, '$1oes'],\n  [\n    /(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i,\n    '$1a'\n  ],\n  [\n    /(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i,\n    '$1a'\n  ],\n  [/sis$/i, 'ses'],\n  [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n  [/([^aeiouy]|qu)y$/i, '$1ies'],\n  [/([^ch][ieo][ln])ey$/i, '$1ies'],\n  [/(x|ch|ss|sh|zz)$/i, '$1es'],\n  [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n  [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n  [/(pe)(?:rson|ople)$/i, '$1ople'],\n  [/(child)(?:ren)?$/i, '$1ren'],\n  [/eaux$/i, '$0'],\n  [/m[ae]n$/i, 'men'],\n  ['thou', 'you']\n]\nconst defaultSingles: [Rule, string][] = [\n  [/s$/i, ''],\n  [/(ss)$/i, '$1'],\n  [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n  [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n  [/ies$/i, 'y'],\n  [/(dg|ss|ois|lk|ok|wn|mb|th|ch|ec|oal|is|ck|ix|sser|ts|wb)ies$/i, '$1ie'],\n  [\n    /\\b(l|(?:neck|cross|hog|aun)?t|coll|faer|food|gen|goon|group|hipp|junk|vegg|(?:pork)?p|charl|calor|cut)ies$/i,\n    '$1ie'\n  ],\n  [/\\b(mon|smil)ies$/i, '$1ey'],\n  [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n  [/(seraph|cherub)im$/i, '$1'],\n  [\n    /(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i,\n    '$1'\n  ],\n  [\n    /(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i,\n    '$1sis'\n  ],\n  [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n  [/(test)(?:is|es)$/i, '$1is'],\n  [\n    /(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,\n    '$1us'\n  ],\n  [\n    /(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i,\n    '$1um'\n  ],\n  [\n    /(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i,\n    '$1on'\n  ],\n  [/(alumn|alg|vertebr)ae$/i, '$1a'],\n  [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n  [/(matr|append)ices$/i, '$1ix'],\n  [/(pe)(rson|ople)$/i, '$1rson'],\n  [/(child)ren$/i, '$1'],\n  [/(eau)x?$/i, '$1'],\n  [/men$/i, 'man']\n]\nconst defaultUncountables: Rule[] = [\n  // Singular words with no plurals.\n  'adulthood',\n  'advice',\n  'agenda',\n  'aid',\n  'aircraft',\n  'alcohol',\n  'ammo',\n  'analytics',\n  'anime',\n  'athletics',\n  'audio',\n  'bison',\n  'blood',\n  'bream',\n  'buffalo',\n  'butter',\n  'carp',\n  'cash',\n  'chassis',\n  'chess',\n  'clothing',\n  'cod',\n  'commerce',\n  'cooperation',\n  'corps',\n  'debris',\n  'diabetes',\n  'digestion',\n  'elk',\n  'energy',\n  'equipment',\n  'excretion',\n  'expertise',\n  'firmware',\n  'flounder',\n  'fun',\n  'gallows',\n  'garbage',\n  'graffiti',\n  'hardware',\n  'headquarters',\n  'health',\n  'herpes',\n  'highjinks',\n  'homework',\n  'housework',\n  'information',\n  'jeans',\n  'justice',\n  'kudos',\n  'labour',\n  'literature',\n  'machinery',\n  'mackerel',\n  'mail',\n  'media',\n  'mews',\n  'moose',\n  'music',\n  'mud',\n  'manga',\n  'news',\n  'only',\n  'personnel',\n  'pike',\n  'plankton',\n  'pliers',\n  'police',\n  'pollution',\n  'premises',\n  'rain',\n  'research',\n  'rice',\n  'salmon',\n  'scissors',\n  'series',\n  'sewage',\n  'shambles',\n  'shrimp',\n  'software',\n  'staff',\n  'swine',\n  'tennis',\n  'traffic',\n  'transportation',\n  'trout',\n  'tuna',\n  'wealth',\n  'welfare',\n  'whiting',\n  'wildebeest',\n  'wildlife',\n  'you',\n  /pok[eé]mon$/i,\n  // Regexes.\n  /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n  /deer$/i, // \"deer\", \"reindeer\"\n  /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n  /measles$/i,\n  /o[iu]s$/i, // \"carnivorous\"\n  /pox$/i, // \"chickpox\", \"smallpox\"\n  /sheep$/i\n]\n// Now lets add all the defaults\nfor (const [single, plural] of defaultIrregulars) {\n  pluralize.addIrregularRule(single, plural)\n}\nfor (const [search, replacement] of defaultPlurals) {\n  pluralize.addPluralRule(search, replacement)\n}\nfor (const [search, replacement] of defaultSingles) {\n  pluralize.addSingularRule(search, replacement)\n}\nfor (const search of defaultUncountables) {\n  pluralize.addUncountableRule(search)\n}\n\n// D O N E, let's export! 😗\nexport default pluralize\n"],"names":[],"version":3,"file":"main.js.map"}