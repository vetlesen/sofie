'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var sanity = require('sanity');
var router = require('sanity/router');
var jsxRuntime = require('react/jsx-runtime');
var axios = require('axios');
var nanoid = require('nanoid');
var react = require('react');
var ui = require('@sanity/ui');
var spacetime = require('spacetime');
var useSWR = require('swr');
var icons = require('@sanity/icons');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var axios__default = /*#__PURE__*/_interopDefaultCompat(axios);
var spacetime__default = /*#__PURE__*/_interopDefaultCompat(spacetime);
var useSWR__default = /*#__PURE__*/_interopDefaultCompat(useSWR);
const deployIcon = () => {
  return /* @__PURE__ */jsxRuntime.jsxs("svg", {
    "data-sanity-icon": "true",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    preserveAspectRatio: "xMidYMid",
    width: "1em",
    height: "1em",
    children: [/* @__PURE__ */jsxRuntime.jsx("path", {
      d: "M10.06,19.53H4.27L12.5,5.21l8.23,14.32H14.94",
      style: {
        stroke: "currentColor",
        strokeWidth: "1.2"
      }
    }), /* @__PURE__ */jsxRuntime.jsx("path", {
      d: "M12.5,12.58v7.51",
      style: {
        stroke: "currentColor",
        strokeWidth: "1.2"
      }
    }), /* @__PURE__ */jsxRuntime.jsx("path", {
      d: "M15.12,16.76,12.5,12.58,10,16.71",
      style: {
        stroke: "currentColor",
        strokeWidth: "1.2"
      }
    })]
  });
};
const DeployStatus = _ref => {
  let {
    status,
    justify,
    children
  } = _ref;
  const titleCase = str => {
    return str.toLowerCase().split(" ").map(word => {
      return word.charAt(0).toUpperCase() + word.slice(1);
    }).join(" ");
  };
  const badgeTone = {
    LOADING: "default",
    ERROR: "critical",
    INITIATED: "default",
    CANCELED: "default",
    READY: "positive",
    BUILDING: "caution",
    QUEUED: "default"
  }[status] || "default";
  const badgeMode = {
    LOADING: "outline",
    READY: "outline",
    CANCELED: "outline"
  }[status] || "default";
  return /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
    wrap: "nowrap",
    align: "center",
    justify,
    children: [/* @__PURE__ */jsxRuntime.jsx(ui.Badge, {
      mode: badgeMode,
      tone: badgeTone,
      padding: 2,
      fontSize: 1,
      children: titleCase(status)
    }), children]
  });
};
const DeployHistory = _ref2 => {
  let {
    url,
    vercelProject,
    vercelToken,
    vercelTeam
  } = _ref2;
  var _a;
  const [deployments, setDeployments] = react.useState([]);
  const [loading, setLoading] = react.useState(false);
  const [error, setError] = react.useState(false);
  const deployHookId = (_a = url == null ? void 0 : url.split("/").pop()) == null ? void 0 : _a.split("?").shift();
  react.useEffect(() => {
    if (!vercelProject) {
      return;
    }
    setLoading(true);
    axios__default.default.get("https://api.vercel.com/v5/now/deployments?projectId=".concat(vercelProject, "&meta-deployHookId=").concat(deployHookId, "&limit=6").concat((vercelTeam == null ? void 0 : vercelTeam.id) ? "&teamId=".concat(vercelTeam == null ? void 0 : vercelTeam.id) : ""), {
      headers: {
        "content-type": "application/json",
        Authorization: "Bearer ".concat(vercelToken)
      }
    }).then(_ref3 => {
      let {
        data
      } = _ref3;
      setDeployments(data.deployments);
      setLoading(false);
      setError(false);
    }).catch(e => {
      setLoading(false);
      setError(true);
      console.warn(e);
    });
  }, [url, vercelProject, vercelTeam == null ? void 0 : vercelTeam.id, vercelToken]);
  if (loading) {
    return /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
      direction: "column",
      align: "center",
      justify: "center",
      paddingTop: 3,
      children: [/* @__PURE__ */jsxRuntime.jsx(ui.Spinner, {
        size: 4
      }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
        padding: 4,
        children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
          size: 2,
          children: "loading deployment history..."
        })
      })]
    });
  }
  if (error) {
    return /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
      padding: 4,
      radius: 2,
      shadow: 1,
      tone: "critical",
      children: /* @__PURE__ */jsxRuntime.jsxs(ui.Text, {
        size: 2,
        align: "center",
        children: ["Could not load deployments for ", vercelProject]
      })
    });
  }
  return /* @__PURE__ */jsxRuntime.jsxs(ui.Box, {
    as: "ul",
    padding: 0,
    children: [/* @__PURE__ */jsxRuntime.jsx(ui.Card, {
      as: "li",
      padding: 4,
      borderBottom: true,
      children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
        children: [/* @__PURE__ */jsxRuntime.jsx(ui.Box, {
          flex: 3,
          children: /* @__PURE__ */jsxRuntime.jsx(ui.Label, {
            muted: true,
            children: "Preview URL"
          })
        }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
          flex: 1,
          marginLeft: 2,
          children: /* @__PURE__ */jsxRuntime.jsx(ui.Label, {
            muted: true,
            children: "State"
          })
        }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
          flex: 3,
          marginLeft: 2,
          style: {
            maxWidth: "40%"
          },
          children: /* @__PURE__ */jsxRuntime.jsx(ui.Label, {
            muted: true,
            children: "Commit"
          })
        }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
          flex: 2,
          marginLeft: 2,
          children: /* @__PURE__ */jsxRuntime.jsx(ui.Label, {
            align: "right",
            muted: true,
            children: "Deployed At"
          })
        })]
      })
    }), deployments == null ? void 0 : deployments.map(deployment => {
      var _a2, _b, _c, _d, _e;
      return /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
        as: "li",
        padding: 4,
        borderBottom: true,
        children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
          align: "center",
          children: [/* @__PURE__ */jsxRuntime.jsx(ui.Box, {
            flex: 3,
            children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
              weight: "semibold",
              children: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                style: {
                  whiteSpace: "nowrap",
                  overflow: "hidden",
                  textOverflow: "ellipsis"
                },
                children: /* @__PURE__ */jsxRuntime.jsx("a", {
                  href: "https://".concat(deployment.url),
                  target: "_blank",
                  rel: "noopener noreferrer",
                  style: {
                    color: "inherit"
                  },
                  children: deployment.url
                })
              })
            })
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
            flex: 1,
            marginLeft: 2,
            children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
              children: /* @__PURE__ */jsxRuntime.jsx(DeployStatus, {
                status: deployment.state
              })
            })
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
            flex: 3,
            marginLeft: 2,
            style: {
              maxWidth: "40%"
            },
            children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
              space: 2,
              children: [/* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                children: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                  style: {
                    whiteSpace: "nowrap",
                    overflow: "hidden",
                    textOverflow: "ellipsis"
                  },
                  children: (_a2 = deployment.meta) == null ? void 0 : _a2.githubCommitMessage
                })
              }), /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                size: 2,
                muted: true,
                children: /* @__PURE__ */jsxRuntime.jsxs(ui.Inline, {
                  space: 3,
                  children: [/* @__PURE__ */jsxRuntime.jsx(icons.TransferIcon, {}), (_b = deployment.meta) == null ? void 0 : _b.githubCommitRef]
                })
              })]
            })
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
            flex: 2,
            justify: "flex-end",
            marginLeft: 2,
            children: /* @__PURE__ */jsxRuntime.jsxs(ui.Inline, {
              space: 2,
              children: [/* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                style: {
                  whiteSpace: "nowrap"
                },
                muted: true,
                children: spacetime__default.default.now().since(spacetime__default.default(deployment.created)).rounded
              }), /* @__PURE__ */jsxRuntime.jsx(ui.Tooltip, {
                content: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                  padding: 2,
                  children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                    muted: true,
                    size: 1,
                    children: (_c = deployment.creator) == null ? void 0 : _c.username
                  })
                }),
                fallbackPlacements: ["right", "left"],
                placement: "top",
                children: /* @__PURE__ */jsxRuntime.jsx(ui.Avatar, {
                  alt: (_d = deployment.creator) == null ? void 0 : _d.username,
                  src: "https://vercel.com/api/www/avatar/".concat((_e = deployment.creator) == null ? void 0 : _e.uid, "?&s=48"),
                  size: 1
                })
              })]
            })
          })]
        })
      }, deployment.uid);
    })]
  });
};
const useClient = () => {
  return sanity.useClient({
    apiVersion: "2022-09-14"
  });
};
const fetcher = (url, token) => axios__default.default.get(url, {
  headers: {
    "content-type": "application/json",
    Authorization: "Bearer ".concat(token)
  }
}).then(res => res.data);
const initialDeploy$1 = {
  title: "",
  project: "",
  team: "",
  url: "",
  token: "",
  disableDeleteAction: false
};
const DeployItem = _ref4 => {
  let {
    name,
    url,
    _id,
    vercelProject,
    vercelToken,
    vercelTeam,
    disableDeleteAction
  } = _ref4;
  var _a;
  const client = useClient();
  const [isLoading, setIsLoading] = react.useState(true);
  const [isDeploying, setDeploying] = react.useState(false);
  const [isHistoryOpen, setIsHistoryOpen] = react.useState(false);
  const [isSubmitting, setIsSubmitting] = react.useState(false);
  const [isFormOpen, setIsFormOpen] = react.useState(false);
  const [pendingDeploy, setpendingDeploy] = react.useState(initialDeploy$1);
  const [errorMessage, setErrorMessage] = react.useState(null);
  const [status, setStatus] = react.useState("LOADING");
  const [timestamp, setTimestamp] = react.useState(null);
  const [buildTime, setBuildTime] = react.useState(null);
  const toast = ui.useToast();
  const deployHookId = (_a = url == null ? void 0 : url.split("/").pop()) == null ? void 0 : _a.split("?").shift();
  const {
    data: projectData
  } = useSWR__default.default(["https://api.vercel.com/v8/projects/".concat(vercelProject).concat((vercelTeam == null ? void 0 : vercelTeam.id) ? "?teamId=".concat(vercelTeam == null ? void 0 : vercelTeam.id) : ""), vercelToken], (path, token) => fetcher(path, token), {
    errorRetryCount: 3,
    onError: err => {
      var _a2, _b, _c;
      setStatus("ERROR");
      setErrorMessage((_c = (_b = (_a2 = err.response) == null ? void 0 : _a2.data) == null ? void 0 : _b.error) == null ? void 0 : _c.message);
      setIsLoading(false);
    }
  });
  const {
    data: deploymentData
  } = useSWR__default.default(() => ["https://api.vercel.com/v5/now/deployments?projectId=".concat(projectData.id, "&meta-deployHookId=").concat(deployHookId, "&limit=1").concat((vercelTeam == null ? void 0 : vercelTeam.id) ? "&teamId=".concat(vercelTeam == null ? void 0 : vercelTeam.id) : ""), vercelToken], (path, token) => fetcher(path, token), {
    errorRetryCount: 3,
    refreshInterval: isDeploying ? 5e3 : 0,
    onError: err => {
      var _a2, _b, _c;
      setStatus("ERROR");
      setErrorMessage((_c = (_b = (_a2 = err.response) == null ? void 0 : _a2.data) == null ? void 0 : _b.error) == null ? void 0 : _c.message);
      setIsLoading(false);
    }
  });
  const onDeploy = (_name, _url) => {
    setStatus("INITIATED");
    setDeploying(true);
    setTimestamp(null);
    setBuildTime(null);
    axios__default.default.post(url).then(() => {
      toast.push({
        status: "success",
        title: "Success!",
        description: "Triggered Deployment: ".concat(_name)
      });
    }).catch(err => {
      setDeploying(false);
      toast.push({
        status: "error",
        title: "Deploy Failed.",
        description: "".concat(err)
      });
    });
  };
  const onCancel = (id, token) => {
    setIsLoading(true);
    axios__default.default.patch("https://api.vercel.com/v12/deployments/".concat(id, "/cancel"), null, {
      headers: {
        "content-type": "application/json",
        Authorization: "Bearer ".concat(token)
      },
      params: {
        ...(vercelTeam ? {
          teamId: vercelTeam == null ? void 0 : vercelTeam.id
        } : {})
      }
    }).then(res => res.data).then(res => {
      setStatus("CANCELED");
      setDeploying(false);
      setIsLoading(false);
      setBuildTime(null);
      setTimestamp(res.canceledAt);
    });
  };
  const onRemove = (_name, id) => {
    setIsLoading(true);
    client.delete(id).then(() => {
      toast.push({
        status: "success",
        title: "Successfully deleted deployment: ".concat(_name)
      });
    });
  };
  const onEdit = () => {
    setpendingDeploy({
      title: name,
      project: vercelProject,
      team: vercelTeam == null ? void 0 : vercelTeam.slug,
      url,
      token: vercelToken,
      disableDeleteAction
    });
    setIsFormOpen(true);
  };
  const onSubmitEdit = async () => {
    var _a2;
    let vercelTeamID;
    let vercelTeamName;
    setIsSubmitting(true);
    if (pendingDeploy.team) {
      try {
        const fetchTeam = await axios__default.default.get("https://api.vercel.com/v2/teams?slug=".concat(pendingDeploy.team), {
          headers: {
            Authorization: "Bearer ".concat(pendingDeploy.token)
          }
        });
        if (!((_a2 = fetchTeam == null ? void 0 : fetchTeam.data) == null ? void 0 : _a2.id)) {
          throw new Error("No team id found");
        }
        vercelTeamID = fetchTeam.data.id;
        vercelTeamName = fetchTeam.data.name;
      } catch (error) {
        console.error(error);
        setIsSubmitting(false);
        toast.push({
          status: "error",
          title: "No Team found!",
          closable: true,
          description: "Make sure the token you provided is valid and that the team\u2019s slug correspond to the one you see in Vercel"
        });
        return;
      }
    }
    client.patch(_id).set({
      name: pendingDeploy.title,
      url: pendingDeploy.url,
      vercelProject: pendingDeploy.project,
      vercelTeam: {
        slug: pendingDeploy.team || void 0,
        name: vercelTeamName || void 0,
        id: vercelTeamID || void 0
      },
      vercelToken: pendingDeploy.token,
      disableDeleteAction: pendingDeploy.disableDeleteAction
    }).commit().then(() => {
      toast.push({
        status: "success",
        title: "Success!",
        description: "Updated Deployment: ".concat(pendingDeploy.title)
      });
      setIsFormOpen(false);
      setIsSubmitting(false);
    });
  };
  react.useEffect(() => {
    let isSubscribed = true;
    if ((deploymentData == null ? void 0 : deploymentData.deployments) && isSubscribed) {
      const latestDeployment = deploymentData.deployments[0];
      setStatus((latestDeployment == null ? void 0 : latestDeployment.state) || "READY");
      if (latestDeployment == null ? void 0 : latestDeployment.created) {
        setTimestamp(latestDeployment == null ? void 0 : latestDeployment.created);
      }
      setIsLoading(false);
    }
    return () => {
      isSubscribed = false;
    };
  }, [deploymentData]);
  react.useEffect(() => {
    let isSubscribed = true;
    if (isSubscribed) {
      if (status === "READY" || status === "ERROR" || status === "CANCELED") {
        setDeploying(false);
      } else if (status === "BUILDING" || status === "INITIATED") {
        setDeploying(true);
      }
    }
    return () => {
      isSubscribed = false;
    };
  }, [status]);
  const tick = _timestamp => {
    if (_timestamp) {
      setBuildTime(spacetime__default.default.now().since(spacetime__default.default(_timestamp)).rounded);
    }
  };
  react.useEffect(() => {
    let isTicking = true;
    const timer = setInterval(() => {
      if (isTicking && isDeploying) {
        tick(timestamp);
      }
    }, 1e3);
    if (!isDeploying) {
      clearInterval(timer);
    }
    return () => {
      isTicking = false;
      clearInterval(timer);
    };
  }, [timestamp, isDeploying]);
  return /* @__PURE__ */jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
      wrap: "wrap",
      direction: ["column", "column", "row"],
      align: ["flex-end", "flex-end", "center"],
      children: [/* @__PURE__ */jsxRuntime.jsx(ui.Box, {
        flex: [4, 1],
        paddingBottom: [4, 4, 1],
        children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
          space: 3,
          children: [/* @__PURE__ */jsxRuntime.jsxs(ui.Inline, {
            space: 2,
            children: [/* @__PURE__ */jsxRuntime.jsx(ui.Heading, {
              as: "h2",
              size: 1,
              children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                weight: "semibold",
                children: name
              })
            }), /* @__PURE__ */jsxRuntime.jsx(ui.Badge, {
              tone: "primary",
              paddingX: 3,
              paddingY: 2,
              radius: 6,
              fontSize: 0,
              children: vercelProject
            }), (vercelTeam == null ? void 0 : vercelTeam.id) && /* @__PURE__ */jsxRuntime.jsx(ui.Badge, {
              mode: "outline",
              paddingX: 3,
              paddingY: 2,
              radius: 6,
              fontSize: 0,
              children: vercelTeam == null ? void 0 : vercelTeam.name
            })]
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Code, {
            size: 1,
            children: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              style: {
                whiteSpace: "nowrap",
                overflow: "hidden",
                textOverflow: "ellipsis"
              },
              children: url
            })
          })]
        })
      }), /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
        wrap: "nowrap",
        align: "center",
        marginLeft: [0, 0, 4],
        flex: [1, "none"],
        children: /* @__PURE__ */jsxRuntime.jsxs(ui.Inline, {
          space: 2,
          children: [vercelToken && vercelProject && /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
            marginRight: 2,
            children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
              space: 2,
              children: [/* @__PURE__ */jsxRuntime.jsx(DeployStatus, {
                status,
                justify: "flex-end",
                children: errorMessage && /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                  marginLeft: 2,
                  children: /* @__PURE__ */jsxRuntime.jsx(ui.Tooltip, {
                    content: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                      padding: 2,
                      children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                        muted: true,
                        size: 1,
                        children: errorMessage
                      })
                    }),
                    placement: "top",
                    children: /* @__PURE__ */jsxRuntime.jsx(ui.Badge, {
                      mode: "outline",
                      tone: "critical",
                      children: "?"
                    })
                  })
                })
              }), /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                align: "right",
                size: 1,
                muted: true,
                children: isDeploying ? buildTime || "--" : timestamp ? spacetime__default.default.now().since(spacetime__default.default(timestamp)).rounded : "--"
              })]
            })
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
            type: "button",
            tone: "positive",
            disabled: isDeploying || isLoading,
            loading: isDeploying || isLoading,
            onClick: () => onDeploy(name),
            paddingX: [5],
            paddingY: [4],
            radius: 3,
            text: "Deploy"
          }), isDeploying && (status === "BUILDING" || status === "QUEUED") && /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
            type: "button",
            tone: "critical",
            onClick: () => {
              onCancel(deploymentData.deployments[0].uid, vercelToken);
            },
            radius: 3,
            text: "Cancel"
          }), /* @__PURE__ */jsxRuntime.jsx(ui.MenuButton, {
            id: _id,
            button: /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
              mode: "bleed",
              icon: icons.EllipsisVerticalIcon,
              disabled: isDeploying || isLoading
            }),
            popover: {
              portal: true,
              placement: "bottom-end"
            },
            menu: /* @__PURE__ */jsxRuntime.jsxs(ui.Menu, {
              children: [/* @__PURE__ */jsxRuntime.jsx(ui.MenuItem, {
                text: "History",
                icon: icons.ClockIcon,
                onClick: () => setIsHistoryOpen(true),
                disabled: !(deploymentData == null ? void 0 : deploymentData.deployments.length)
              }), /* @__PURE__ */jsxRuntime.jsx(ui.MenuItem, {
                text: "Edit",
                icon: icons.EditIcon,
                tone: "primary",
                onClick: () => onEdit()
              }), !disableDeleteAction && /* @__PURE__ */jsxRuntime.jsx(ui.MenuItem, {
                text: "Delete",
                icon: icons.TrashIcon,
                tone: "critical",
                onClick: () => onRemove(name, _id)
              })]
            })
          })]
        })
      })]
    }), isFormOpen && /* @__PURE__ */jsxRuntime.jsx(ui.Dialog, {
      header: "Edit Project Deployment",
      id: "update-webhook",
      width: 1,
      onClickOutside: () => setIsFormOpen(false),
      onClose: () => setIsFormOpen(false),
      footer: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
        padding: 3,
        children: /* @__PURE__ */jsxRuntime.jsxs(ui.Grid, {
          columns: 2,
          gap: 3,
          children: [/* @__PURE__ */jsxRuntime.jsx(ui.Button, {
            padding: 4,
            mode: "ghost",
            text: "Cancel",
            onClick: () => setIsFormOpen(false)
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
            padding: 4,
            text: "Update",
            tone: "primary",
            loading: isSubmitting,
            onClick: () => onSubmitEdit(),
            disabled: isSubmitting || !pendingDeploy.project || !pendingDeploy.url || !pendingDeploy.token
          })]
        })
      }),
      children: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
        padding: 4,
        children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
          space: 4,
          children: [/* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
            title: "Display Title (internal use only)",
            description: /* @__PURE__ */jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: ["This should be the environment you are deploying to, like", " ", /* @__PURE__ */jsxRuntime.jsx("em", {
                children: "Production"
              }), " or ", /* @__PURE__ */jsxRuntime.jsx("em", {
                children: "Staging"
              })]
            }),
            children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
              type: "text",
              value: pendingDeploy.title,
              onChange: e => {
                e.persist();
                const title = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    title
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
            title: "Vercel Project Name",
            description: "Vercel Project: Settings \u2192 General \u2192 \"Project Name\"",
            children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
              type: "text",
              value: pendingDeploy.project,
              onChange: e => {
                e.persist();
                const project = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    project
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
            title: "Vercel Team Name",
            description: "Required for projects under a Vercel Team: Settings \u2192 General \u2192 \"Team Name\"",
            children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
              type: "text",
              value: pendingDeploy.team,
              onChange: e => {
                e.persist();
                const team = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    team
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
            title: "Deploy Hook URL",
            description: "Vercel Project: Settings \u2192 Git \u2192 \"Deploy Hooks\"",
            children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
              type: "text",
              inputMode: "url",
              value: pendingDeploy.url,
              onChange: e => {
                e.persist();
                const pendingDeployUrl = e.target.value;
                setpendingDeploy(prevState => ({
                  ...prevState,
                  ...{
                    url: pendingDeployUrl
                  }
                }));
              }
            })
          }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
            children: /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
              paddingY: 3,
              children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
                align: "center",
                children: [/* @__PURE__ */jsxRuntime.jsx(ui.Switch, {
                  id: "disableDeleteAction",
                  style: {
                    display: "block"
                  },
                  onChange: e => {
                    e.persist();
                    const isChecked = e.target.checked;
                    setpendingDeploy(prevState => ({
                      ...prevState,
                      ...{
                        disableDeleteAction: isChecked
                      }
                    }));
                  },
                  checked: pendingDeploy.disableDeleteAction
                }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                  flex: 1,
                  paddingLeft: 3,
                  children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                    children: /* @__PURE__ */jsxRuntime.jsx("label", {
                      htmlFor: "disableDeleteAction",
                      children: 'Disable the "Delete" action for this item in production?'
                    })
                  })
                })]
              })
            })
          })]
        })
      })
    }), isHistoryOpen && /* @__PURE__ */jsxRuntime.jsx(ui.Dialog, {
      id: "deploy-history",
      header: "Deployment History: ".concat(name),
      onClickOutside: () => setIsHistoryOpen(false),
      onClose: () => setIsHistoryOpen(false),
      width: 2,
      children: /* @__PURE__ */jsxRuntime.jsx(DeployHistory, {
        url,
        vercelProject: projectData.id,
        vercelToken,
        vercelTeam
      })
    })]
  });
};
const initialDeploy = {
  title: "",
  project: "",
  team: "",
  url: "",
  token: "",
  disableDeleteAction: false
};
const VercelDeploy = () => {
  const WEBHOOK_TYPE = "webhook_deploy";
  const WEBHOOK_QUERY = "*[_type == \"".concat(WEBHOOK_TYPE, "\"] | order(_createdAt)");
  const client = useClient();
  const {
    scheme
  } = sanity.useColorScheme();
  const [isLoading, setIsLoading] = react.useState(true);
  const [isSubmitting, setIsSubmitting] = react.useState(false);
  const [isFormOpen, setIsFormOpen] = react.useState(false);
  const [deploys, setDeploys] = react.useState([]);
  const [pendingDeploy, setpendingDeploy] = react.useState(initialDeploy);
  const toast = ui.useToast();
  const onSubmit = async () => {
    var _a;
    let vercelTeamID;
    let vercelTeamName;
    setIsSubmitting(true);
    if (pendingDeploy.team) {
      try {
        const fetchTeam = await axios__default.default.get("https://api.vercel.com/v2/teams?slug=".concat(pendingDeploy.team), {
          headers: {
            Authorization: "Bearer ".concat(pendingDeploy.token)
          }
        });
        if (!((_a = fetchTeam == null ? void 0 : fetchTeam.data) == null ? void 0 : _a.id)) {
          throw new Error("No team id found");
        }
        vercelTeamID = fetchTeam.data.id;
        vercelTeamName = fetchTeam.data.name;
      } catch (error) {
        console.error(error);
        setIsSubmitting(false);
        toast.push({
          status: "error",
          title: "No Team found!",
          closable: true,
          description: "Make sure the token you provided is valid and that the team\u2019s slug correspond to the one you see in Vercel"
        });
        return;
      }
    }
    client.create({
      // Explicitly define an _id inside the vercel-deploy path to make sure it's not publicly accessible
      // This will protect users' tokens & project info. Read more: https://www.sanity.io/docs/ids
      _id: "vercel-deploy.".concat(nanoid.nanoid()),
      _type: WEBHOOK_TYPE,
      name: pendingDeploy.title,
      url: pendingDeploy.url,
      vercelProject: pendingDeploy.project,
      vercelTeam: {
        slug: pendingDeploy.team || void 0,
        name: vercelTeamName || void 0,
        id: vercelTeamID || void 0
      },
      vercelToken: pendingDeploy.token,
      disableDeleteAction: pendingDeploy.disableDeleteAction
    }).then(() => {
      toast.push({
        status: "success",
        title: "Success!",
        description: "Created Deployment: ".concat(pendingDeploy.title)
      });
      setIsFormOpen(false);
      setIsSubmitting(false);
      setpendingDeploy(initialDeploy);
    });
  };
  react.useEffect(() => {
    let webhookSubscription;
    client.fetch(WEBHOOK_QUERY).then(w => {
      setDeploys(w);
      setIsLoading(false);
      webhookSubscription = client.listen(WEBHOOK_QUERY, {}, {
        includeResult: true
      }).subscribe({
        next: res => {
          if (res.type === "mutation") {
            const wasCreated = res.mutations.some(item => Object.prototype.hasOwnProperty.call(item, "create"));
            const wasPatched = res.mutations.some(item => Object.prototype.hasOwnProperty.call(item, "patch"));
            const wasDeleted = res.mutations.some(item => Object.prototype.hasOwnProperty.call(item, "delete"));
            const filterDeploy = deploy => deploy._id !== res.documentId;
            const updateDeploy = deploy => deploy._id === res.documentId ? res.result : deploy;
            if (wasCreated) {
              setDeploys(prevState => {
                if (res.result) {
                  return [...prevState, res.result];
                }
                return prevState;
              });
            }
            if (wasPatched) {
              setDeploys(prevState => {
                const updatedDeploys = prevState.map(updateDeploy);
                return updatedDeploys;
              });
            }
            if (wasDeleted) {
              setDeploys(prevState => prevState.filter(filterDeploy));
            }
          }
        }
      });
    });
    return () => {
      if (webhookSubscription) {
        webhookSubscription.unsubscribe();
      }
    };
  }, [WEBHOOK_QUERY, client]);
  return /* @__PURE__ */jsxRuntime.jsx(ui.ThemeProvider, {
    theme: ui.studioTheme,
    children: /* @__PURE__ */jsxRuntime.jsxs(ui.ToastProvider, {
      children: [/* @__PURE__ */jsxRuntime.jsx(ui.Container, {
        display: "grid",
        width: 6,
        style: {
          minHeight: "100%"
        },
        children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
          direction: "column",
          children: [/* @__PURE__ */jsxRuntime.jsx(ui.Card, {
            padding: 4,
            borderBottom: true,
            children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
              align: "center",
              children: [/* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
                flex: 1,
                align: "center",
                children: [/* @__PURE__ */jsxRuntime.jsx(ui.Card, {
                  children: /* @__PURE__ */jsxRuntime.jsx("svg", {
                    fill: "currentColor",
                    viewBox: "0 0 512 512",
                    height: "2rem",
                    width: "2rem",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: /* @__PURE__ */jsxRuntime.jsx("path", {
                      d: "M256 48l240 416H16z"
                    })
                  })
                }), /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
                  marginX: 1,
                  style: {
                    opacity: 0.15
                  },
                  children: /* @__PURE__ */jsxRuntime.jsx("svg", {
                    viewBox: "0 0 24 24",
                    width: "32",
                    height: "32",
                    stroke: "currentColor",
                    strokeWidth: "1",
                    strokeLinecap: "round",
                    strokeLinejoin: "round",
                    fill: "none",
                    shapeRendering: "geometricPrecision",
                    children: /* @__PURE__ */jsxRuntime.jsx("path", {
                      d: "M16.88 3.549L7.12 20.451"
                    })
                  })
                }), /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
                  children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                    as: "h1",
                    size: 2,
                    weight: "semibold",
                    children: "Vercel Deployments"
                  })
                })]
              }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                children: /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
                  type: "button",
                  fontSize: 2,
                  tone: "primary",
                  padding: 3,
                  radius: 3,
                  text: "Add Project",
                  onClick: () => setIsFormOpen(true)
                })
              })]
            })
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
            flex: 1,
            children: /* @__PURE__ */jsxRuntime.jsx(ui.Stack, {
              as: "ul",
              children: isLoading ? /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
                as: "li",
                padding: 4,
                children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
                  direction: "column",
                  align: "center",
                  justify: "center",
                  paddingTop: 3,
                  children: [/* @__PURE__ */jsxRuntime.jsx(ui.Spinner, {
                    size: 4
                  }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                    padding: 4,
                    children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                      size: 2,
                      children: "loading your deployments..."
                    })
                  })]
                })
              }) : deploys.length ? deploys.map(deploy => /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
                as: "li",
                padding: 4,
                borderBottom: true,
                children: /* @__PURE__ */jsxRuntime.jsx(DeployItem, {
                  name: deploy.name,
                  url: deploy.url,
                  _id: deploy._id,
                  vercelProject: deploy.vercelProject,
                  vercelTeam: deploy.vercelTeam,
                  vercelToken: deploy.vercelToken,
                  disableDeleteAction: deploy.disableDeleteAction
                }, deploy._id)
              }, deploy._id)) : /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
                as: "li",
                padding: 5,
                paddingTop: 6,
                children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
                  direction: "column",
                  align: "center",
                  justify: "center",
                  children: [/* @__PURE__ */jsxRuntime.jsxs("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    fill: "none",
                    width: "150",
                    viewBox: "0 0 260 235",
                    children: [/* @__PURE__ */jsxRuntime.jsx("path", {
                      fill: scheme === "dark" ? "transparent" : "white",
                      fillRule: "evenodd",
                      stroke: scheme === "dark" ? "white" : "black",
                      strokeDasharray: "4 4",
                      strokeWidth: "2",
                      d: "M107.36 2.48l105.7 185.47H2.66L108.35 2.48z",
                      clipRule: "evenodd"
                    }), /* @__PURE__ */jsxRuntime.jsx("ellipse", {
                      cx: "182.68",
                      cy: "156.48",
                      fill: "transparent",
                      rx: "74.32",
                      ry: "74.52"
                    }), /* @__PURE__ */jsxRuntime.jsx("path", {
                      stroke: scheme === "dark" ? "white" : "black",
                      strokeWidth: "2",
                      d: "M256.5 156.48c0 40.88-33.05 74.02-73.82 74.02-40.77 0-73.83-33.14-73.83-74.02 0-40.87 33.06-74.01 73.83-74.01 40.77 0 73.82 33.14 73.82 74.01z"
                    }), /* @__PURE__ */jsxRuntime.jsx("mask", {
                      id: "a",
                      width: "149",
                      height: "150",
                      x: "108",
                      y: "81",
                      maskUnits: "userSpaceOnUse",
                      children: /* @__PURE__ */jsxRuntime.jsx("ellipse", {
                        cx: "182.68",
                        cy: "156.48",
                        fill: "white",
                        rx: "74.32",
                        ry: "74.52"
                      })
                    }), /* @__PURE__ */jsxRuntime.jsx("g", {
                      mask: "url(#a)",
                      children: /* @__PURE__ */jsxRuntime.jsx("path", {
                        fill: scheme === "dark" ? "white" : "black",
                        fillRule: "evenodd",
                        d: "M108.36 2.48l105.7 185.47H2.66L108.35 2.48z",
                        clipRule: "evenodd"
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
                    direction: "column",
                    align: "center",
                    padding: 4,
                    children: [/* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                      size: 3,
                      children: "No deployments created yet."
                    }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                      padding: 4,
                      children: /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
                        fontSize: 3,
                        paddingX: 5,
                        paddingY: 4,
                        tone: "primary",
                        radius: 4,
                        text: "Add Project",
                        onClick: () => setIsFormOpen(true)
                      })
                    }), /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                      size: 1,
                      weight: "semibold",
                      muted: true,
                      children: /* @__PURE__ */jsxRuntime.jsx("a", {
                        href: "https://github.com/ndimatteo/sanity-plugin-vercel-deploy#-your-first-vercel-deployment",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        style: {
                          color: "inherit"
                        },
                        children: "Need help?"
                      })
                    })]
                  })]
                })
              })
            })
          })]
        })
      }), isFormOpen && /* @__PURE__ */jsxRuntime.jsx(ui.Dialog, {
        header: "New Project Deployment",
        id: "create-webhook",
        width: 1,
        onClickOutside: () => setIsFormOpen(false),
        onClose: () => setIsFormOpen(false),
        footer: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
          padding: 3,
          children: /* @__PURE__ */jsxRuntime.jsxs(ui.Grid, {
            columns: 2,
            gap: 3,
            children: [/* @__PURE__ */jsxRuntime.jsx(ui.Button, {
              padding: 4,
              mode: "ghost",
              text: "Cancel",
              onClick: () => setIsFormOpen(false)
            }), /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
              padding: 4,
              text: "Create",
              tone: "primary",
              loading: isSubmitting,
              onClick: () => onSubmit(),
              disabled: isSubmitting || !pendingDeploy.project || !pendingDeploy.url || !pendingDeploy.token
            })]
          })
        }),
        children: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
          padding: 4,
          children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
            space: 4,
            children: [/* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
              title: "Display Title (internal use only)",
              description: /* @__PURE__ */jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: ["This should be the environment you are deploying to, like", " ", /* @__PURE__ */jsxRuntime.jsx("em", {
                  children: "Production"
                }), " or ", /* @__PURE__ */jsxRuntime.jsx("em", {
                  children: "Staging"
                })]
              }),
              children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
                type: "text",
                value: pendingDeploy.title,
                onChange: e => {
                  e.persist();
                  const title = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      title
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
              title: "Vercel Project Name",
              description: "Vercel Project: Settings \u2192 General \u2192 \"Project Name\"",
              children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
                type: "text",
                value: pendingDeploy.project,
                onChange: e => {
                  e.persist();
                  const project = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      project
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
              title: "Vercel Team Name",
              description: "Required for projects under a Vercel Team: Settings \u2192 General \u2192 \"Team Name\"",
              children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
                type: "text",
                value: pendingDeploy.team,
                onChange: e => {
                  e.persist();
                  const team = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      team
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
              title: "Deploy Hook URL",
              description: "Vercel Project: Settings \u2192 Git \u2192 \"Deploy Hooks\"",
              children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
                type: "text",
                inputMode: "url",
                value: pendingDeploy.url,
                onChange: e => {
                  e.persist();
                  const url = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      url
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
              title: "Vercel Token",
              description: "Vercel Account dropdown: Settings \u2192 \"Tokens\"",
              children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
                type: "text",
                value: pendingDeploy.token,
                onChange: e => {
                  e.persist();
                  const token = e.target.value;
                  setpendingDeploy(prevState => ({
                    ...prevState,
                    ...{
                      token
                    }
                  }));
                }
              })
            }), /* @__PURE__ */jsxRuntime.jsx(sanity.FormField, {
              children: /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
                paddingY: 3,
                children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
                  align: "center",
                  children: [/* @__PURE__ */jsxRuntime.jsx(ui.Switch, {
                    id: "disableDeleteAction",
                    style: {
                      display: "block"
                    },
                    onChange: e => {
                      e.persist();
                      const isChecked = e.target.checked;
                      setpendingDeploy(prevState => ({
                        ...prevState,
                        ...{
                          disableDeleteAction: isChecked
                        }
                      }));
                    },
                    checked: pendingDeploy.disableDeleteAction
                  }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
                    flex: 1,
                    paddingLeft: 3,
                    children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                      children: /* @__PURE__ */jsxRuntime.jsx("label", {
                        htmlFor: "disableDeleteAction",
                        children: 'Disable the "Delete" action for this item in production?'
                      })
                    })
                  })]
                })
              })
            })]
          })
        })
      })]
    })
  });
};
const vercelDeployTool = sanity.definePlugin(options => {
  const {
    name,
    title,
    icon,
    ...config
  } = options || {};
  return {
    name: "sanity-plugin-vercel-deploy",
    tools: [{
      name: name || "vercel-deploy",
      title: title || "Deploy",
      icon: icon || deployIcon,
      component: VercelDeploy,
      options: config,
      router: router.route.create("/*")
    }]
  };
});
exports.vercelDeployTool = vercelDeployTool;
//# sourceMappingURL=index.js.map
